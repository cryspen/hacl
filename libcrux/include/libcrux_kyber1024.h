/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: ../../../eurydice/eurydice --config ../../kyber-c.yaml ../libcrux_kyber.llbc
  F* version: b5cb71b8
  KaRaMeL version: 1282f04f
 */

#ifndef __libcrux_kyber1024_H
#define __libcrux_kyber1024_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "libcrux_digest.h"
#include "core.h"
#include "eurydice_glue.h"

#define LIBCRUX_KYBER_KYBER1024_RANK_1024 ((size_t)4U)

#define LIBCRUX_KYBER_KYBER1024_RANKED_BYTES_PER_RING_ELEMENT_1024 (LIBCRUX_KYBER_KYBER1024_RANK_1024 * LIBCRUX_KYBER_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_T_AS_NTT_ENCODED_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_RANK_1024 * LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_VECTOR_U_COMPRESSION_FACTOR_1024 ((size_t)11U)

#define LIBCRUX_KYBER_KYBER1024_C1_BLOCK_SIZE_1024 (LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER1024_VECTOR_U_COMPRESSION_FACTOR_1024 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_C1_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_C1_BLOCK_SIZE_1024 * LIBCRUX_KYBER_KYBER1024_RANK_1024)

#define LIBCRUX_KYBER_KYBER1024_VECTOR_V_COMPRESSION_FACTOR_1024 ((size_t)5U)

#define LIBCRUX_KYBER_KYBER1024_C2_SIZE_1024 (LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER1024_VECTOR_V_COMPRESSION_FACTOR_1024 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_CPA_PKE_SECRET_KEY_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_RANK_1024 * LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_CPA_PKE_PUBLIC_KEY_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_T_AS_NTT_ENCODED_SIZE_1024 + (size_t)32U)

#define LIBCRUX_KYBER_KYBER1024_CPA_PKE_CIPHERTEXT_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_C1_SIZE_1024 + LIBCRUX_KYBER_KYBER1024_C2_SIZE_1024)

#define LIBCRUX_KYBER_KYBER1024_SECRET_KEY_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_CPA_PKE_SECRET_KEY_SIZE_1024 + LIBCRUX_KYBER_KYBER1024_CPA_PKE_PUBLIC_KEY_SIZE_1024 + LIBCRUX_KYBER_CONSTANTS_H_DIGEST_SIZE + LIBCRUX_KYBER_CONSTANTS_SHARED_SECRET_SIZE)

#define LIBCRUX_KYBER_KYBER1024_ETA1 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER1024_ETA1_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER1024_ETA1 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER1024_ETA2 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER1024_ETA2_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER1024_ETA2 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER1024_IMPLICIT_REJECTION_HASH_INPUT_SIZE (LIBCRUX_KYBER_CONSTANTS_SHARED_SECRET_SIZE + LIBCRUX_KYBER_KYBER1024_CPA_PKE_CIPHERTEXT_SIZE_1024)

typedef uint8_t libcrux_kyber_types_MlKemPublicKey___1568size_t[1568U];

typedef struct core_option_Option__libcrux_kyber_types_MlKemPublicKey__1568size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_kyber_types_MlKemPublicKey___1568size_t f0;
}
core_option_Option__libcrux_kyber_types_MlKemPublicKey__1568size_t__;

core_option_Option__libcrux_kyber_types_MlKemPublicKey__1568size_t__
libcrux_kyber_kyber1024_validate_public_key(uint8_t public_key[1568U]);

typedef struct libcrux_kyber_types_MlKemKeyPair___3168size_t_1568size_t_s
{
  uint8_t sk[3168U];
  uint8_t pk[1568U];
}
libcrux_kyber_types_MlKemKeyPair___3168size_t_1568size_t;

libcrux_kyber_types_MlKemKeyPair___3168size_t_1568size_t
libcrux_kyber_kyber1024_generate_key_pair(uint8_t randomness[64U]);

typedef struct libcrux_kyber_MlKemState___4size_t_s
{
  int32_t secret_as_ntt[4U][256U];
  int32_t t_as_ntt[4U][256U];
  int32_t a_transpose[4U][4U][256U];
  uint8_t rej[32U];
  uint8_t ind_cpa_public_key_hash[32U];
}
libcrux_kyber_MlKemState___4size_t;

typedef struct
K___libcrux_kyber_MlKemState__4size_t___libcrux_kyber_types_MlKemPublicKey__1568size_t___s
{
  libcrux_kyber_MlKemState___4size_t fst;
  uint8_t snd[1568U];
}
K___libcrux_kyber_MlKemState__4size_t___libcrux_kyber_types_MlKemPublicKey__1568size_t__;

K___libcrux_kyber_MlKemState__4size_t___libcrux_kyber_types_MlKemPublicKey__1568size_t__
libcrux_kyber_kyber1024_generate_key_pair_unpacked(uint8_t randomness[64U]);

typedef struct K___libcrux_kyber_types_MlKemCiphertext__1568size_t___uint8_t_32size_t__s
{
  uint8_t fst[1568U];
  uint8_t snd[32U];
}
K___libcrux_kyber_types_MlKemCiphertext__1568size_t___uint8_t_32size_t_;

K___libcrux_kyber_types_MlKemCiphertext__1568size_t___uint8_t_32size_t_
libcrux_kyber_kyber1024_encapsulate(uint8_t (*public_key)[1568U], uint8_t randomness[32U]);

void
libcrux_kyber_kyber1024_decapsulate(
  uint8_t (*secret_key)[3168U],
  uint8_t (*ciphertext)[1568U],
  uint8_t ret[32U]
);

void
libcrux_kyber_kyber1024_decapsulate_unpacked(
  libcrux_kyber_MlKemState___4size_t *state,
  uint8_t (*ciphertext)[1568U],
  uint8_t ret[32U]
);

#if defined(__cplusplus)
}
#endif

#define __libcrux_kyber1024_H_DEFINED
#endif
