/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: ../../../eurydice/eurydice --config ../../kyber-c.yaml ../libcrux_kyber.llbc
  F* version: c990b3ca
  KaRaMeL version: 63d581ed
 */

#ifndef __libcrux_kyber512_H
#define __libcrux_kyber512_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "libcrux_digest.h"
#include "core.h"
#include "eurydice_glue.h"

#define LIBCRUX_KYBER_KYBER512_RANK_512 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER512_RANKED_BYTES_PER_RING_ELEMENT_512 (LIBCRUX_KYBER_KYBER512_RANK_512 * LIBCRUX_KYBER_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_T_AS_NTT_ENCODED_SIZE_512 (LIBCRUX_KYBER_KYBER512_RANK_512 * LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_VECTOR_U_COMPRESSION_FACTOR_512 ((size_t)10U)

#define LIBCRUX_KYBER_KYBER512_C1_BLOCK_SIZE_512 (LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER512_VECTOR_U_COMPRESSION_FACTOR_512 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_C1_SIZE_512 (LIBCRUX_KYBER_KYBER512_C1_BLOCK_SIZE_512 * LIBCRUX_KYBER_KYBER512_RANK_512)

#define LIBCRUX_KYBER_KYBER512_VECTOR_V_COMPRESSION_FACTOR_512 ((size_t)4U)

#define LIBCRUX_KYBER_KYBER512_C2_SIZE_512 (LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER512_VECTOR_V_COMPRESSION_FACTOR_512 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_CPA_PKE_SECRET_KEY_SIZE_512 (LIBCRUX_KYBER_KYBER512_RANK_512 * LIBCRUX_KYBER_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_CPA_PKE_PUBLIC_KEY_SIZE_512 (LIBCRUX_KYBER_KYBER512_T_AS_NTT_ENCODED_SIZE_512 + (size_t)32U)

#define LIBCRUX_KYBER_KYBER512_CPA_PKE_CIPHERTEXT_SIZE_512 (LIBCRUX_KYBER_KYBER512_C1_SIZE_512 + LIBCRUX_KYBER_KYBER512_C2_SIZE_512)

#define LIBCRUX_KYBER_KYBER512_SECRET_KEY_SIZE_512 (LIBCRUX_KYBER_KYBER512_CPA_PKE_SECRET_KEY_SIZE_512 + LIBCRUX_KYBER_KYBER512_CPA_PKE_PUBLIC_KEY_SIZE_512 + LIBCRUX_KYBER_CONSTANTS_H_DIGEST_SIZE + LIBCRUX_KYBER_CONSTANTS_SHARED_SECRET_SIZE)

#define LIBCRUX_KYBER_KYBER512_ETA1 ((size_t)3U)

#define LIBCRUX_KYBER_KYBER512_ETA1_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER512_ETA1 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER512_ETA2 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER512_ETA2_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER512_ETA2 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER512_IMPLICIT_REJECTION_HASH_INPUT_SIZE (LIBCRUX_KYBER_CONSTANTS_SHARED_SECRET_SIZE + LIBCRUX_KYBER_KYBER512_CPA_PKE_CIPHERTEXT_SIZE_512)

typedef uint8_t libcrux_kyber_types_MlKemPublicKey___800size_t[800U];

typedef struct core_option_Option__libcrux_kyber_types_MlKemPublicKey__800size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_kyber_types_MlKemPublicKey___800size_t f0;
}
core_option_Option__libcrux_kyber_types_MlKemPublicKey__800size_t__;

core_option_Option__libcrux_kyber_types_MlKemPublicKey__800size_t__
libcrux_kyber_kyber512_validate_public_key(uint8_t public_key[800U]);

typedef struct libcrux_kyber_types_MlKemKeyPair___1632size_t_800size_t_s
{
  uint8_t sk[1632U];
  uint8_t pk[800U];
}
libcrux_kyber_types_MlKemKeyPair___1632size_t_800size_t;

libcrux_kyber_types_MlKemKeyPair___1632size_t_800size_t
libcrux_kyber_kyber512_generate_key_pair(uint8_t randomness[64U]);

typedef struct libcrux_kyber_MlKemState___2size_t_s
{
  int32_t secret_as_ntt[2U][256U];
  int32_t t_as_ntt[2U][256U];
  int32_t a_transpose[2U][2U][256U];
  uint8_t rej[32U];
  uint8_t ind_cpa_public_key_hash[32U];
}
libcrux_kyber_MlKemState___2size_t;

typedef struct
K___libcrux_kyber_MlKemState__2size_t___libcrux_kyber_types_MlKemPublicKey__800size_t___s
{
  libcrux_kyber_MlKemState___2size_t fst;
  uint8_t snd[800U];
}
K___libcrux_kyber_MlKemState__2size_t___libcrux_kyber_types_MlKemPublicKey__800size_t__;

K___libcrux_kyber_MlKemState__2size_t___libcrux_kyber_types_MlKemPublicKey__800size_t__
libcrux_kyber_kyber512_generate_key_pair_unpacked(uint8_t randomness[64U]);

typedef struct K___libcrux_kyber_types_MlKemCiphertext__768size_t___uint8_t_32size_t__s
{
  uint8_t fst[768U];
  uint8_t snd[32U];
}
K___libcrux_kyber_types_MlKemCiphertext__768size_t___uint8_t_32size_t_;

K___libcrux_kyber_types_MlKemCiphertext__768size_t___uint8_t_32size_t_
libcrux_kyber_kyber512_encapsulate(uint8_t (*public_key)[800U], uint8_t randomness[32U]);

void
libcrux_kyber_kyber512_decapsulate(
  uint8_t (*secret_key)[1632U],
  uint8_t (*ciphertext)[768U],
  uint8_t ret[32U]
);

void
libcrux_kyber_kyber512_decapsulate_unpacked(
  libcrux_kyber_MlKemState___2size_t *state,
  uint8_t (*ciphertext)[768U],
  uint8_t ret[32U]
);

#if defined(__cplusplus)
}
#endif

#define __libcrux_kyber512_H_DEFINED
#endif
