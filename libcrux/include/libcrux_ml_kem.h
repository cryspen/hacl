/*
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/franziskus/repos/eurydice//eurydice --config
  ../c.yaml ../../libcrux_ml_kem.llbc F* version: a32b316e KaRaMeL version:
  3568f417
 */

#ifndef __libcrux_ml_kem_H
#define __libcrux_ml_kem_H

#if defined(__cplusplus)
extern "C"
{
#endif

#include "Eurydice.h"
#include "core.h"
#include "eurydice_glue.h"
#include "libcrux_hacl_glue.h"

#define LIBCRUX_ML_KEM_CONSTANTS__FIELD_MODULUS ((int16_t)3329)

#define LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT ((size_t)12U)

#define LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT ((size_t)256U)

#define LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT                         \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT * (size_t)12U)

#define LIBCRUX_ML_KEM_CONSTANTS_BYTES_PER_RING_ELEMENT                        \
  (LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE ((size_t)32U)

#define LIBCRUX_ML_KEM_CONSTANTS_CPA_PKE_KEY_GENERATION_SEED_SIZE ((size_t)32U)

#define LIBCRUX_ML_KEM_CONSTANTS_H_DIGEST_SIZE ((size_t)32U)

#define LIBCRUX_ML_KEM_CONSTANTS_G_DIGEST_SIZE ((size_t)64U)

  uint8_t libcrux_ml_kem_constant_time_ops_is_non_zero(uint8_t value);

  void libcrux_ml_kem_constant_time_ops_select_shared_secret_in_constant_time(
    Eurydice_slice lhs,
    Eurydice_slice rhs,
    uint8_t selector,
    uint8_t ret[32U]);

#define LIBCRUX_ML_KEM_HASH_FUNCTIONS_BLOCK_SIZE ((size_t)168U)

#define LIBCRUX_ML_KEM_HASH_FUNCTIONS_THREE_BLOCKS                             \
  (LIBCRUX_ML_KEM_HASH_FUNCTIONS_BLOCK_SIZE * (size_t)3U)

  extern void libcrux_sha3_portable_sha512(Eurydice_slice x0,
                                           Eurydice_slice x1);

  extern void libcrux_sha3_portable_sha256(Eurydice_slice x0,
                                           Eurydice_slice x1);

#define libcrux_sha3_portable_shake256(x_0, x_1, x_2, _ret_t)                  \
  libcrux_sha3_portable_shake256_(x_0, x_1, x_2)

  extern void libcrux_sha3_portable_shake256_(size_t x0,
                                              uint8_t* x1,
                                              Eurydice_slice x2);

  extern libcrux_sha3_portable_KeccakState1
  libcrux_sha3_portable_incremental_shake128_init(void);

  extern void libcrux_sha3_portable_incremental_shake128_absorb_final(
    libcrux_sha3_portable_KeccakState1* x0,
    Eurydice_slice x1);

  extern void
  libcrux_sha3_portable_incremental_shake128_squeeze_first_three_blocks(
    libcrux_sha3_portable_KeccakState1* x0,
    Eurydice_slice x1);

  extern void libcrux_sha3_portable_incremental_shake128_squeeze_next_block(
    libcrux_sha3_portable_KeccakState1* x0,
    Eurydice_slice x1);

//   typedef libcrux_sha3_avx2_x4_incremental_KeccakState4
//     libcrux_ml_kem_hash_functions_avx2_Simd256Hash;

//   typedef struct libcrux_ml_kem_hash_functions_neon_Simd128Hash_s
//   {
//     libcrux_sha3_neon_x2_incremental_KeccakState2 shake128_state[2U];
//   } libcrux_ml_kem_hash_functions_neon_Simd128Hash;

//   extern void libcrux_sha3_neon_sha512(Eurydice_slice x0, Eurydice_slice x1);

//   extern void libcrux_sha3_neon_sha256(Eurydice_slice x0, Eurydice_slice x1);

// #define libcrux_sha3_neon_shake256(x_0, x_1, x_2, _ret_t)                      \
//   libcrux_sha3_neon_shake256_(x_0, x_1, x_2)

//   extern void libcrux_sha3_neon_shake256_(size_t x0,
//                                           uint8_t* x1,
//                                           Eurydice_slice x2);

// #define libcrux_sha3_neon_x2_incremental_shake128_absorb_finalxN(              \
//   x_0, x_1, x_2, _ret_t)                                                       \
//   libcrux_sha3_neon_x2_incremental_shake128_absorb_finalxN_(x_0, x_1, x_2)

//   extern void libcrux_sha3_neon_x2_incremental_shake128_absorb_finalxN_(
//     size_t x0,
//     uint8_t (*x1)[34U],
//     libcrux_sha3_neon_x2_incremental_KeccakState2 x2[2U]);

#define LIBCRUX_ML_KEM_IND_CCA_KEY_GENERATION_SEED_SIZE                        \
  (LIBCRUX_ML_KEM_CONSTANTS_CPA_PKE_KEY_GENERATION_SEED_SIZE +                 \
   LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE)

#define LIBCRUX_ML_KEM_IND_CCA_ENCAPS_SEED_SIZE                                \
  (LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE)

  extern bool libcrux_platform_platform_simd256_support(void);

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_ELEMENTS_IN_VECTOR ((size_t)16U)

#define LIBCRUX_ML_KEM_POLYNOMIAL_VECTORS_IN_RING_ELEMENT                      \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT /                     \
   LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_ELEMENTS_IN_VECTOR)

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_FIELD_MODULUS ((int16_t)3329)

  typedef struct libcrux_ml_kem_vector_PortableVector_s
  {
    int16_t elements[16U];
  } libcrux_ml_kem_vector_PortableVector;

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___core__clone__Clone_for_libcrux_ml_kem__vector__PortableVector__1__clone(
    libcrux_ml_kem_vector_PortableVector* self);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_zero(void);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ZERO(
    void);

  void libcrux_ml_kem_vector_to_i16_array(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t ret[16U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___to_i16_array(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t ret[16U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_from_i16_array(
    Eurydice_slice array);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___from_i16_array(
    Eurydice_slice array);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_add(
    libcrux_ml_kem_vector_PortableVector lhs,
    libcrux_ml_kem_vector_PortableVector* rhs);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___add(
    libcrux_ml_kem_vector_PortableVector lhs,
    libcrux_ml_kem_vector_PortableVector* rhs);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_sub(
    libcrux_ml_kem_vector_PortableVector lhs,
    libcrux_ml_kem_vector_PortableVector* rhs);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___sub(
    libcrux_ml_kem_vector_PortableVector lhs,
    libcrux_ml_kem_vector_PortableVector* rhs);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_multiply_by_constant(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t c);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___multiply_by_constant(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t c);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_bitwise_and_with_constant(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t c);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___bitwise_and_with_constant(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t c);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_cond_subtract_3329(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___cond_subtract_3329(
    libcrux_ml_kem_vector_PortableVector v);

#define LIBCRUX_ML_KEM_VECTOR_BARRETT_MULTIPLIER ((int32_t)20159)

#define LIBCRUX_ML_KEM_VECTOR_BARRETT_SHIFT ((int32_t)26)

#define LIBCRUX_ML_KEM_VECTOR_BARRETT_R                                        \
  ((int32_t)1 << (uint32_t)LIBCRUX_ML_KEM_VECTOR_BARRETT_SHIFT)

  int16_t libcrux_ml_kem_vector_barrett_reduce_element(int16_t value);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_barrett_reduce(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___barrett_reduce(
    libcrux_ml_kem_vector_PortableVector v);

#define LIBCRUX_ML_KEM_VECTOR_MONTGOMERY_SHIFT (16U)

#define LIBCRUX_ML_KEM_VECTOR_MONTGOMERY_R                                     \
  ((int32_t)1 << (uint32_t)LIBCRUX_ML_KEM_VECTOR_MONTGOMERY_SHIFT)

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_INVERSE_OF_MODULUS_MOD_MONTGOMERY_R       \
  (62209U)

  int16_t libcrux_ml_kem_vector_montgomery_reduce_element(int32_t value);

  int16_t libcrux_ml_kem_vector_montgomery_multiply_fe_by_fer(int16_t fe,
                                                              int16_t fer);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_montgomery_multiply_by_constant(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t c);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___montgomery_multiply_by_constant(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t r);

  uint8_t libcrux_ml_kem_vector_compress_message_coefficient(uint16_t fe);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_compress_1(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress_1(
    libcrux_ml_kem_vector_PortableVector v);

  uint32_t libcrux_ml_kem_vector_get_n_least_significant_bits(uint8_t n,
                                                              uint32_t value);

  int16_t libcrux_ml_kem_vector_compress_ciphertext_coefficient(
    uint8_t coefficient_bits,
    uint16_t fe);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_ntt_layer_1_step(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t zeta0,
    int16_t zeta1,
    int16_t zeta2,
    int16_t zeta3);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_layer_1_step(
    libcrux_ml_kem_vector_PortableVector a,
    int16_t zeta0,
    int16_t zeta1,
    int16_t zeta2,
    int16_t zeta3);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_ntt_layer_2_step(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t zeta0,
    int16_t zeta1);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_layer_2_step(
    libcrux_ml_kem_vector_PortableVector a,
    int16_t zeta0,
    int16_t zeta1);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_ntt_layer_3_step(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t zeta);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_layer_3_step(
    libcrux_ml_kem_vector_PortableVector a,
    int16_t zeta);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_inv_ntt_layer_1_step(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t zeta0,
    int16_t zeta1,
    int16_t zeta2,
    int16_t zeta3);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___inv_ntt_layer_1_step(
    libcrux_ml_kem_vector_PortableVector a,
    int16_t zeta0,
    int16_t zeta1,
    int16_t zeta2,
    int16_t zeta3);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_inv_ntt_layer_2_step(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t zeta0,
    int16_t zeta1);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___inv_ntt_layer_2_step(
    libcrux_ml_kem_vector_PortableVector a,
    int16_t zeta0,
    int16_t zeta1);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_inv_ntt_layer_3_step(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t zeta);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___inv_ntt_layer_3_step(
    libcrux_ml_kem_vector_PortableVector a,
    int16_t zeta);

  typedef struct K___int16_t_int16_t_s
  {
    int16_t fst;
    int16_t snd;
  } K___int16_t_int16_t;

  K___int16_t_int16_t libcrux_ml_kem_vector_ntt_multiply_binomials(
    K___int16_t_int16_t _,
    K___int16_t_int16_t _0,
    int16_t zeta);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_ntt_multiply(
    libcrux_ml_kem_vector_PortableVector* lhs,
    libcrux_ml_kem_vector_PortableVector* rhs,
    int16_t zeta0,
    int16_t zeta1,
    int16_t zeta2,
    int16_t zeta3);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___ntt_multiply(
    libcrux_ml_kem_vector_PortableVector* lhs,
    libcrux_ml_kem_vector_PortableVector* rhs,
    int16_t zeta0,
    int16_t zeta1,
    int16_t zeta2,
    int16_t zeta3);

  void libcrux_ml_kem_vector_serialize_1(libcrux_ml_kem_vector_PortableVector v,
                                         uint8_t ret[2U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_1(
    libcrux_ml_kem_vector_PortableVector a,
    uint8_t ret[2U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_deserialize_1(
    Eurydice_slice v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_1(
    Eurydice_slice a);

  void libcrux_ml_kem_vector_serialize_4(libcrux_ml_kem_vector_PortableVector v,
                                         uint8_t ret[8U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_4(
    libcrux_ml_kem_vector_PortableVector a,
    uint8_t ret[8U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_deserialize_4(
    Eurydice_slice bytes);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_4(
    Eurydice_slice a);

  void libcrux_ml_kem_vector_serialize_5(libcrux_ml_kem_vector_PortableVector v,
                                         uint8_t ret[10U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_5(
    libcrux_ml_kem_vector_PortableVector a,
    uint8_t ret[10U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_deserialize_5(
    Eurydice_slice bytes);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_5(
    Eurydice_slice a);

  void libcrux_ml_kem_vector_serialize_10(
    libcrux_ml_kem_vector_PortableVector v,
    uint8_t ret[20U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_10(
    libcrux_ml_kem_vector_PortableVector a,
    uint8_t ret[20U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_deserialize_10(
    Eurydice_slice bytes);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_10(
    Eurydice_slice a);

  void libcrux_ml_kem_vector_serialize_11(
    libcrux_ml_kem_vector_PortableVector v,
    uint8_t ret[22U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_11(
    libcrux_ml_kem_vector_PortableVector a,
    uint8_t ret[22U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_deserialize_11(
    Eurydice_slice bytes);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_11(
    Eurydice_slice a);

  void libcrux_ml_kem_vector_serialize_12(
    libcrux_ml_kem_vector_PortableVector v,
    uint8_t ret[24U]);

  void
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___serialize_12(
    libcrux_ml_kem_vector_PortableVector a,
    uint8_t ret[24U]);

  libcrux_ml_kem_vector_PortableVector libcrux_ml_kem_vector_deserialize_12(
    Eurydice_slice bytes);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___deserialize_12(
    Eurydice_slice a);

  size_t libcrux_ml_kem_vector_rej_sample(Eurydice_slice a,
                                          Eurydice_slice result);

  size_t
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___rej_sample(
    Eurydice_slice a,
    Eurydice_slice out);

  extern bool libcrux_platform_platform_simd128_support(void);

  extern const int16_t libcrux_ml_kem_polynomial_ZETAS_TIMES_MONTGOMERY_R[128U];

#define LIBCRUX_ML_KEM_VECTOR_TRAITS_MONTGOMERY_R_SQUARED_MOD_FIELD_MODULUS    \
  ((int16_t)1353)

#define LIBCRUX_ML_KEM_MLKEM1024_RANK_1024 ((size_t)4U)

#define LIBCRUX_ML_KEM_MLKEM1024_RANKED_BYTES_PER_RING_ELEMENT_1024            \
  (LIBCRUX_ML_KEM_MLKEM1024_RANK_1024 *                                        \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM1024_T_AS_NTT_ENCODED_SIZE_1024                    \
  (LIBCRUX_ML_KEM_MLKEM1024_RANK_1024 *                                        \
   LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM1024_VECTOR_U_COMPRESSION_FACTOR_1024 ((size_t)11U)

#define LIBCRUX_ML_KEM_MLKEM1024_C1_BLOCK_SIZE_1024                            \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_MLKEM1024_VECTOR_U_COMPRESSION_FACTOR_1024 / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM1024_C1_SIZE_1024                                  \
  (LIBCRUX_ML_KEM_MLKEM1024_C1_BLOCK_SIZE_1024 *                               \
   LIBCRUX_ML_KEM_MLKEM1024_RANK_1024)

#define LIBCRUX_ML_KEM_MLKEM1024_VECTOR_V_COMPRESSION_FACTOR_1024 ((size_t)5U)

#define LIBCRUX_ML_KEM_MLKEM1024_C2_SIZE_1024                                  \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_MLKEM1024_VECTOR_V_COMPRESSION_FACTOR_1024 / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM1024_CPA_PKE_SECRET_KEY_SIZE_1024                  \
  (LIBCRUX_ML_KEM_MLKEM1024_RANK_1024 *                                        \
   LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM1024_CPA_PKE_PUBLIC_KEY_SIZE_1024                  \
  (LIBCRUX_ML_KEM_MLKEM1024_T_AS_NTT_ENCODED_SIZE_1024 + (size_t)32U)

#define LIBCRUX_ML_KEM_MLKEM1024_CPA_PKE_CIPHERTEXT_SIZE_1024                  \
  (LIBCRUX_ML_KEM_MLKEM1024_C1_SIZE_1024 +                                     \
   LIBCRUX_ML_KEM_MLKEM1024_C2_SIZE_1024)

#define LIBCRUX_ML_KEM_MLKEM1024_SECRET_KEY_SIZE_1024                          \
  (LIBCRUX_ML_KEM_MLKEM1024_CPA_PKE_SECRET_KEY_SIZE_1024 +                     \
   LIBCRUX_ML_KEM_MLKEM1024_CPA_PKE_PUBLIC_KEY_SIZE_1024 +                     \
   LIBCRUX_ML_KEM_CONSTANTS_H_DIGEST_SIZE +                                    \
   LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE)

#define LIBCRUX_ML_KEM_MLKEM1024_ETA1 ((size_t)2U)

#define LIBCRUX_ML_KEM_MLKEM1024_ETA1_RANDOMNESS_SIZE                          \
  (LIBCRUX_ML_KEM_MLKEM1024_ETA1 * (size_t)64U)

#define LIBCRUX_ML_KEM_MLKEM1024_ETA2 ((size_t)2U)

#define LIBCRUX_ML_KEM_MLKEM1024_ETA2_RANDOMNESS_SIZE                          \
  (LIBCRUX_ML_KEM_MLKEM1024_ETA2 * (size_t)64U)

#define LIBCRUX_ML_KEM_MLKEM1024_IMPLICIT_REJECTION_HASH_INPUT_SIZE            \
  (LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE +                               \
   LIBCRUX_ML_KEM_MLKEM1024_CPA_PKE_CIPHERTEXT_SIZE_1024)

  typedef struct
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_s
  {
    libcrux_ml_kem_vector_PortableVector coefficients[16U];
  } libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector;

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___ZERO__libcrux_ml_kem_vector_PortableVector(
    void);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced_closure__libcrux_ml_kem_vector_PortableVector_1568size_t_4size_t(
    size_t _i);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_to_reduced_ring_element__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice serialized);

  void
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced__libcrux_ml_kem_vector_PortableVector_1568size_t_4size_t(
    Eurydice_slice public_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_shift_right___15int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___shift_right___15int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_traits_to_unsigned_representative__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_vector_PortableVector a);

  void
  libcrux_ml_kem_serialize_serialize_uncompressed_ring_element__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[384U]);

  void
  libcrux_ml_kem_ind_cpa_serialize_secret_key__libcrux_ml_kem_vector_PortableVector_4size_t_1536size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      key[4U],
    uint8_t ret[1536U]);

  void
  libcrux_ml_kem_ind_cpa_serialize_public_key__libcrux_ml_kem_vector_PortableVector_4size_t_1536size_t_1568size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      t_as_ntt[4U],
    Eurydice_slice seed_for_a,
    uint8_t ret[1568U]);

  bool
  libcrux_ml_kem_ind_cca_validate_public_key_generic__libcrux_ml_kem_vector_PortableVector_4size_t_1536size_t_1568size_t(
    uint8_t* public_key);

  bool
  libcrux_ml_kem_ind_cca_validate_public_key___4size_t_1536size_t_1568size_t(
    uint8_t* public_key);

  typedef struct libcrux_ml_kem_types_MlKemPublicKey____1568size_t_s
  {
    uint8_t value[1568U];
  } libcrux_ml_kem_types_MlKemPublicKey____1568size_t;

  typedef struct
    core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t___s
  {
    core_option_Option__size_t_tags tag;
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t f0;
  } core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t__;

  core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1568size_t__
  libcrux_ml_kem_mlkem1024_validate_public_key(
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t public_key);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____G___4size_t(
    Eurydice_slice input,
    uint8_t ret[64U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_sample_matrix_A_closure_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t(
    size_t _j);

  void
  libcrux_ml_kem_matrix_sample_matrix_A_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t(
    size_t _i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  typedef struct
    libcrux_ml_kem_hash_functions_portable_PortableHash____4size_t_s
  {
    libcrux_sha3_portable_KeccakState1 shake128_state[4U];
  } libcrux_ml_kem_hash_functions_portable_PortableHash____4size_t;

  libcrux_ml_kem_hash_functions_portable_PortableHash____4size_t
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_init_absorb___4size_t(
    uint8_t input[4U][34U]);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_squeeze_three_blocks___4size_t(
    libcrux_ml_kem_hash_functions_portable_PortableHash____4size_t* self,
    uint8_t ret[4U][504U]);

  bool
  libcrux_ml_kem_sampling_sample_from_uniform_distribution_next__libcrux_ml_kem_vector_PortableVector_4size_t_504size_t(
    uint8_t randomness[4U][504U],
    size_t* sampled_coefficients,
    int16_t (*out)[272U]);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_squeeze_block___4size_t(
    libcrux_ml_kem_hash_functions_portable_PortableHash____4size_t* self,
    uint8_t ret[4U][168U]);

  bool
  libcrux_ml_kem_sampling_sample_from_uniform_distribution_next__libcrux_ml_kem_vector_PortableVector_4size_t_168size_t(
    uint8_t randomness[4U][168U],
    size_t* sampled_coefficients,
    int16_t (*out)[272U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___from_i16_array__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice a);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_xof_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t(
    int16_t s[272U]);

  void
  libcrux_ml_kem_sampling_sample_from_xof__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t(
    uint8_t seeds[4U][34U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  void
  libcrux_ml_kem_matrix_sample_matrix_A__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t(
    uint8_t seed[34U],
    bool transpose,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U][4U]);

  void libcrux_ml_kem_ind_cpa_into_padded_array___34size_t(Eurydice_slice slice,
                                                           uint8_t ret[34U]);

  void libcrux_ml_kem_ind_cpa_into_padded_array___33size_t(Eurydice_slice slice,
                                                           uint8_t ret[33U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_2size_t_128size_t(
    size_t _i);

  void
    libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRFxN___4size_t_128size_t(
      uint8_t (*input)[33U],
      uint8_t ret[4U][128U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_binomial_distribution_2__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice randomness);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_binomial_distribution_3__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice randomness);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_binomial_distribution__libcrux_ml_kem_vector_PortableVector_2size_t(
    Eurydice_slice randomness);

  void libcrux_ml_kem_ntt_ntt_at_layer_7__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_traits_montgomery_multiply_fe__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_vector_PortableVector v,
    int16_t fer);

  typedef struct
    K___libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_vector_PortableVector_s
  {
    libcrux_ml_kem_vector_PortableVector fst;
    libcrux_ml_kem_vector_PortableVector snd;
  } K___libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_vector_PortableVector;

  K___libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ntt_ntt_layer_int_vec_step__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_vector_PortableVector a,
    libcrux_ml_kem_vector_PortableVector b,
    int16_t zeta_r);

  void
  libcrux_ml_kem_ntt_ntt_at_layer_4_plus__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t layer,
    size_t _initial_coefficient_bound);

  void libcrux_ml_kem_ntt_ntt_at_layer_3__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t _layer,
    size_t _initial_coefficient_bound);

  void libcrux_ml_kem_ntt_ntt_at_layer_2__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t _layer,
    size_t _initial_coefficient_bound);

  void libcrux_ml_kem_ntt_ntt_at_layer_1__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t _layer,
    size_t _initial_coefficient_bound);

  void
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___poly_barrett_reduce__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self);

  void
  libcrux_ml_kem_ntt_ntt_binomially_sampled_ring_element__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  typedef struct
    K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t__uint8_t_s
  {
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      fst[4U];
    uint8_t snd;
  } K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t__uint8_t;

  K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t__uint8_t
  libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_2size_t_128size_t(
    uint8_t prf_input[33U],
    uint8_t domain_separator);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_As_plus_e_closure__libcrux_ml_kem_vector_PortableVector_4size_t(
    size_t _i);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___ntt_multiply__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      rhs);

  void
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_to_ring_element__libcrux_ml_kem_vector_PortableVector_4size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      rhs);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_traits_to_standard_domain__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_vector_PortableVector v);

  void
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_standard_error_reduce__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error);

  void libcrux_ml_kem_matrix_compute_As_plus_e__libcrux_ml_kem_vector_PortableVector_4size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector (
      *matrix_A)[4U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      s_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  typedef struct K___uint8_t_1536size_t__uint8_t_1568size_t__s
  {
    uint8_t fst[1536U];
    uint8_t snd[1568U];
  } K___uint8_t_1536size_t__uint8_t_1568size_t_;

  typedef struct K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t_s
  {
    Eurydice_slice fst;
    Eurydice_slice snd;
  } K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t;

  K___uint8_t_1536size_t__uint8_t_1568size_t_
  libcrux_ml_kem_ind_cpa_generate_keypair__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_1536size_t_1568size_t_1536size_t_2size_t_128size_t(
    Eurydice_slice key_generation_seed);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____H___4size_t(
    Eurydice_slice input,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cca_serialize_kem_secret_key__libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_3168size_t(
    Eurydice_slice private_key,
    Eurydice_slice public_key,
    Eurydice_slice implicit_rejection_value,
    uint8_t ret[3168U]);

  typedef struct libcrux_ml_kem_types_MlKemPrivateKey____3168size_t_s
  {
    uint8_t value[3168U];
  } libcrux_ml_kem_types_MlKemPrivateKey____3168size_t;

  libcrux_ml_kem_types_MlKemPrivateKey____3168size_t
  libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPrivateKey_SIZE___8__from___3168size_t(
    uint8_t value[3168U]);

  typedef struct libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t_s
  {
    libcrux_ml_kem_types_MlKemPrivateKey____3168size_t sk;
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t pk;
  } libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t;

  libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemKeyPair_PRIVATE_KEY_SIZE__PUBLIC_KEY_SIZE___from___3168size_t_1568size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____3168size_t sk,
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t pk);

  libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t
  libcrux_ml_kem_ind_cca_generate_keypair_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_1536size_t_3168size_t_1568size_t_1536size_t_2size_t_128size_t(
    Eurydice_slice ind_cpa_keypair_randomness,
    Eurydice_slice implicit_rejection_value);

  libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t
  libcrux_ml_kem_ind_cca_generate_keypair___4size_t_1536size_t_3168size_t_1568size_t_1536size_t_2size_t_128size_t(
    uint8_t randomness[64U]);

  libcrux_ml_kem_types_MlKemKeyPair____3168size_t__1568size_t
  libcrux_ml_kem_mlkem1024_generate_key_pair(uint8_t randomness[64U]);

  void libcrux_ml_kem_ind_cpa_into_padded_array___64size_t(Eurydice_slice slice,
                                                           uint8_t ret[64U]);

  uint8_t*
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPublicKey_SIZE__18__as_slice___1568size_t(
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t* self);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced_closure__libcrux_ml_kem_vector_PortableVector_1536size_t_4size_t(
    size_t _i);

  void
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced__libcrux_ml_kem_vector_PortableVector_1536size_t_4size_t(
    Eurydice_slice public_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_sample_ring_element_cbd_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_128size_t_2size_t(
    size_t _i);

  K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_4size_t__uint8_t
  libcrux_ml_kem_ind_cpa_sample_ring_element_cbd__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_128size_t_2size_t(
    uint8_t prf_input[33U],
    uint8_t domain_separator);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRF___4size_t_128size_t(
    Eurydice_slice input,
    uint8_t ret[128U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_vector_u_closure__libcrux_ml_kem_vector_PortableVector_4size_t(
    size_t _i);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_at_layer_1__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t _layer);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_at_layer_2__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t _layer);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_at_layer_3__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t _layer);

  K___libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_invert_ntt_inv_ntt_layer_int_vec_step_reduce__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_vector_PortableVector a,
    libcrux_ml_kem_vector_PortableVector b,
    int16_t zeta_r);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_at_layer_4_plus__libcrux_ml_kem_vector_PortableVector(
    size_t* zeta_i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    size_t layer);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_montgomery__libcrux_ml_kem_vector_PortableVector_4size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  void
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_error_reduce__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error);

  void libcrux_ml_kem_matrix_compute_vector_u__libcrux_ml_kem_vector_PortableVector_4size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector (
      *a_as_ntt)[4U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      r_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_1,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_traits_decompress_1__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_message__libcrux_ml_kem_vector_PortableVector(
    uint8_t serialized[32U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_message_error_reduce__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      message,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      result);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_ring_element_v__libcrux_ml_kem_vector_PortableVector_4size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      t_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      r_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_2,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      message);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_compress___10int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___10int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_10__libcrux_ml_kem_vector_PortableVector_352size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[352U]);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_compress___11int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___11int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_11__libcrux_ml_kem_vector_PortableVector_352size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[352U]);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_ring_element_u__libcrux_ml_kem_vector_PortableVector_11size_t_352size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[352U]);

  void
  libcrux_ml_kem_ind_cpa_compress_then_serialize_u__libcrux_ml_kem_vector_PortableVector_4size_t_1408size_t_11size_t_352size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      input[4U],
    Eurydice_slice out);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_compress___4int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___4int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_4__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      re,
    Eurydice_slice serialized);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_compress___5int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___compress___5int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_5__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      re,
    Eurydice_slice serialized);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_ring_element_v__libcrux_ml_kem_vector_PortableVector_5size_t_160size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      re,
    Eurydice_slice out);

  void
  libcrux_ml_kem_ind_cpa_encrypt__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_1568size_t_1536size_t_1408size_t_160size_t_11size_t_5size_t_352size_t_2size_t_128size_t_2size_t_128size_t(
    Eurydice_slice public_key,
    uint8_t message[32U],
    Eurydice_slice randomness,
    uint8_t ret[1568U]);

  typedef struct libcrux_ml_kem_types_MlKemCiphertext____1568size_t_s
  {
    uint8_t value[1568U];
  } libcrux_ml_kem_types_MlKemCiphertext____1568size_t;

  typedef struct
    K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t__s
  {
    libcrux_ml_kem_types_MlKemCiphertext____1568size_t fst;
    uint8_t snd[32U];
  } K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t_;

  K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t_
  libcrux_ml_kem_ind_cca_encapsulate_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_1568size_t_1568size_t_1536size_t_1408size_t_160size_t_11size_t_5size_t_352size_t_2size_t_128size_t_2size_t_128size_t(
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t* public_key,
    uint8_t randomness[32U]);

  K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t_
  libcrux_ml_kem_ind_cca_encapsulate___4size_t_1568size_t_1568size_t_1536size_t_1408size_t_160size_t_11size_t_5size_t_352size_t_2size_t_128size_t_2size_t_128size_t(
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t* public_key,
    uint8_t randomness[32U]);

  K___libcrux_ml_kem_types_MlKemCiphertext___1568size_t___uint8_t_32size_t_
  libcrux_ml_kem_mlkem1024_encapsulate(
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t* public_key,
    uint8_t randomness[32U]);

  K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPrivateKey_SIZE__12__split_at___3168size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____3168size_t* self,
    size_t mid);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_deserialize_then_decompress_u_closure__libcrux_ml_kem_vector_PortableVector_4size_t_1568size_t_11size_t(
    size_t _);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_decompress_ciphertext_coefficient___10int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___10int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_10__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice serialized);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_decompress_ciphertext_coefficient___11int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___11int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_11__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice serialized);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_ring_element_u__libcrux_ml_kem_vector_PortableVector_11size_t(
    Eurydice_slice serialized);

  void
  libcrux_ml_kem_ntt_ntt_vector_u__libcrux_ml_kem_vector_PortableVector_11size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  void
  libcrux_ml_kem_ind_cpa_deserialize_then_decompress_u__libcrux_ml_kem_vector_PortableVector_4size_t_1568size_t_11size_t(
    uint8_t* ciphertext,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_decompress_ciphertext_coefficient___4int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___4int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_4__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice serialized);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector_decompress_ciphertext_coefficient___5int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_vector___libcrux_ml_kem__vector__traits__Operations_for_libcrux_ml_kem__vector__PortableVector___decompress_ciphertext_coefficient___5int32_t(
    libcrux_ml_kem_vector_PortableVector v);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_5__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice serialized);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_ring_element_v__libcrux_ml_kem_vector_PortableVector_5size_t(
    Eurydice_slice serialized);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_deserialize_secret_key_closure__libcrux_ml_kem_vector_PortableVector_4size_t(
    size_t _);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_to_uncompressed_ring_element__libcrux_ml_kem_vector_PortableVector(
    Eurydice_slice serialized);

  void
  libcrux_ml_kem_ind_cpa_deserialize_secret_key__libcrux_ml_kem_vector_PortableVector_4size_t(
    Eurydice_slice secret_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[4U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___subtract_reduce__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      b);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_message__libcrux_ml_kem_vector_PortableVector_4size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      v,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      secret_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      u_as_ntt);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_message__libcrux_ml_kem_vector_PortableVector(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      re,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cpa_decrypt__libcrux_ml_kem_vector_PortableVector_4size_t_1568size_t_1408size_t_11size_t_5size_t(
    Eurydice_slice secret_key,
    uint8_t* ciphertext,
    uint8_t ret[32U]);

  void libcrux_ml_kem_ind_cpa_into_padded_array___1600size_t(
    Eurydice_slice slice,
    uint8_t ret[1600U]);

  Eurydice_slice
  libcrux_ml_kem_types___core__convert__AsRef__Slice_u8___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___1__as_ref___1568size_t(
    libcrux_ml_kem_types_MlKemCiphertext____1568size_t* self);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRF___4size_t_32size_t(
    Eurydice_slice input,
    uint8_t ret[32U]);

  uint8_t
  libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time___1568size_t(
    Eurydice_slice lhs,
    Eurydice_slice rhs);

  void
  libcrux_ml_kem_ind_cca_decapsulate_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___4size_t___4size_t_3168size_t_1536size_t_1568size_t_1568size_t_1536size_t_1408size_t_160size_t_11size_t_5size_t_352size_t_2size_t_128size_t_2size_t_128size_t_1600size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____3168size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____1568size_t* ciphertext,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cca_decapsulate___4size_t_3168size_t_1536size_t_1568size_t_1568size_t_1536size_t_1408size_t_160size_t_11size_t_5size_t_352size_t_2size_t_128size_t_2size_t_128size_t_1600size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____3168size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____1568size_t* ciphertext,
    uint8_t ret[32U]);

  void libcrux_ml_kem_mlkem1024_decapsulate(
    libcrux_ml_kem_types_MlKemPrivateKey____3168size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____1568size_t* ciphertext,
    uint8_t ret[32U]);

#define LIBCRUX_ML_KEM_MLKEM512_RANK_512 ((size_t)2U)

#define LIBCRUX_ML_KEM_MLKEM512_RANKED_BYTES_PER_RING_ELEMENT_512              \
  (LIBCRUX_ML_KEM_MLKEM512_RANK_512 *                                          \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM512_T_AS_NTT_ENCODED_SIZE_512                      \
  (LIBCRUX_ML_KEM_MLKEM512_RANK_512 *                                          \
   LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM512_VECTOR_U_COMPRESSION_FACTOR_512 ((size_t)10U)

#define LIBCRUX_ML_KEM_MLKEM512_C1_BLOCK_SIZE_512                              \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_MLKEM512_VECTOR_U_COMPRESSION_FACTOR_512 / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM512_C1_SIZE_512                                    \
  (LIBCRUX_ML_KEM_MLKEM512_C1_BLOCK_SIZE_512 * LIBCRUX_ML_KEM_MLKEM512_RANK_512)

#define LIBCRUX_ML_KEM_MLKEM512_VECTOR_V_COMPRESSION_FACTOR_512 ((size_t)4U)

#define LIBCRUX_ML_KEM_MLKEM512_C2_SIZE_512                                    \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_MLKEM512_VECTOR_V_COMPRESSION_FACTOR_512 / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM512_CPA_PKE_SECRET_KEY_SIZE_512                    \
  (LIBCRUX_ML_KEM_MLKEM512_RANK_512 *                                          \
   LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM512_CPA_PKE_PUBLIC_KEY_SIZE_512                    \
  (LIBCRUX_ML_KEM_MLKEM512_T_AS_NTT_ENCODED_SIZE_512 + (size_t)32U)

#define LIBCRUX_ML_KEM_MLKEM512_CPA_PKE_CIPHERTEXT_SIZE_512                    \
  (LIBCRUX_ML_KEM_MLKEM512_C1_SIZE_512 + LIBCRUX_ML_KEM_MLKEM512_C2_SIZE_512)

#define LIBCRUX_ML_KEM_MLKEM512_SECRET_KEY_SIZE_512                            \
  (LIBCRUX_ML_KEM_MLKEM512_CPA_PKE_SECRET_KEY_SIZE_512 +                       \
   LIBCRUX_ML_KEM_MLKEM512_CPA_PKE_PUBLIC_KEY_SIZE_512 +                       \
   LIBCRUX_ML_KEM_CONSTANTS_H_DIGEST_SIZE +                                    \
   LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE)

#define LIBCRUX_ML_KEM_MLKEM512_ETA1 ((size_t)3U)

#define LIBCRUX_ML_KEM_MLKEM512_ETA1_RANDOMNESS_SIZE                           \
  (LIBCRUX_ML_KEM_MLKEM512_ETA1 * (size_t)64U)

#define LIBCRUX_ML_KEM_MLKEM512_ETA2 ((size_t)2U)

#define LIBCRUX_ML_KEM_MLKEM512_ETA2_RANDOMNESS_SIZE                           \
  (LIBCRUX_ML_KEM_MLKEM512_ETA2 * (size_t)64U)

#define LIBCRUX_ML_KEM_MLKEM512_IMPLICIT_REJECTION_HASH_INPUT_SIZE             \
  (LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE +                               \
   LIBCRUX_ML_KEM_MLKEM512_CPA_PKE_CIPHERTEXT_SIZE_512)

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced_closure__libcrux_ml_kem_vector_PortableVector_800size_t_2size_t(
    size_t _i);

  void
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced__libcrux_ml_kem_vector_PortableVector_800size_t_2size_t(
    Eurydice_slice public_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  void
  libcrux_ml_kem_ind_cpa_serialize_secret_key__libcrux_ml_kem_vector_PortableVector_2size_t_768size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      key[2U],
    uint8_t ret[768U]);

  void
  libcrux_ml_kem_ind_cpa_serialize_public_key__libcrux_ml_kem_vector_PortableVector_2size_t_768size_t_800size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      t_as_ntt[2U],
    Eurydice_slice seed_for_a,
    uint8_t ret[800U]);

  bool
  libcrux_ml_kem_ind_cca_validate_public_key_generic__libcrux_ml_kem_vector_PortableVector_2size_t_768size_t_800size_t(
    uint8_t* public_key);

  bool libcrux_ml_kem_ind_cca_validate_public_key___2size_t_768size_t_800size_t(
    uint8_t* public_key);

  typedef struct libcrux_ml_kem_types_MlKemPublicKey____800size_t_s
  {
    uint8_t value[800U];
  } libcrux_ml_kem_types_MlKemPublicKey____800size_t;

  typedef struct
    core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t___s
  {
    core_option_Option__size_t_tags tag;
    libcrux_ml_kem_types_MlKemPublicKey____800size_t f0;
  } core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t__;

  core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___800size_t__
  libcrux_ml_kem_mlkem512_validate_public_key(
    libcrux_ml_kem_types_MlKemPublicKey____800size_t public_key);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____G___2size_t(
    Eurydice_slice input,
    uint8_t ret[64U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_sample_matrix_A_closure_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t(
    size_t _j);

  void
  libcrux_ml_kem_matrix_sample_matrix_A_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t(
    size_t _i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  typedef struct
    libcrux_ml_kem_hash_functions_portable_PortableHash____2size_t_s
  {
    libcrux_sha3_portable_KeccakState1 shake128_state[2U];
  } libcrux_ml_kem_hash_functions_portable_PortableHash____2size_t;

  libcrux_ml_kem_hash_functions_portable_PortableHash____2size_t
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_init_absorb___2size_t(
    uint8_t input[2U][34U]);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_squeeze_three_blocks___2size_t(
    libcrux_ml_kem_hash_functions_portable_PortableHash____2size_t* self,
    uint8_t ret[2U][504U]);

  bool
  libcrux_ml_kem_sampling_sample_from_uniform_distribution_next__libcrux_ml_kem_vector_PortableVector_2size_t_504size_t(
    uint8_t randomness[2U][504U],
    size_t* sampled_coefficients,
    int16_t (*out)[272U]);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_squeeze_block___2size_t(
    libcrux_ml_kem_hash_functions_portable_PortableHash____2size_t* self,
    uint8_t ret[2U][168U]);

  bool
  libcrux_ml_kem_sampling_sample_from_uniform_distribution_next__libcrux_ml_kem_vector_PortableVector_2size_t_168size_t(
    uint8_t randomness[2U][168U],
    size_t* sampled_coefficients,
    int16_t (*out)[272U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_xof_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t(
    int16_t s[272U]);

  void
  libcrux_ml_kem_sampling_sample_from_xof__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t(
    uint8_t seeds[2U][34U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  void
  libcrux_ml_kem_matrix_sample_matrix_A__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t(
    uint8_t seed[34U],
    bool transpose,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U][2U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_3size_t_192size_t(
    size_t _i);

  void
    libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRFxN___2size_t_192size_t(
      uint8_t (*input)[33U],
      uint8_t ret[2U][192U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_binomial_distribution__libcrux_ml_kem_vector_PortableVector_3size_t(
    Eurydice_slice randomness);

  typedef struct
    K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t__uint8_t_s
  {
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      fst[2U];
    uint8_t snd;
  } K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t__uint8_t;

  K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t__uint8_t
  libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_3size_t_192size_t(
    uint8_t prf_input[33U],
    uint8_t domain_separator);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_As_plus_e_closure__libcrux_ml_kem_vector_PortableVector_2size_t(
    size_t _i);

  void
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_to_ring_element__libcrux_ml_kem_vector_PortableVector_2size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      rhs);

  void libcrux_ml_kem_matrix_compute_As_plus_e__libcrux_ml_kem_vector_PortableVector_2size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector (
      *matrix_A)[2U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      s_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  typedef struct K___uint8_t_768size_t__uint8_t_800size_t__s
  {
    uint8_t fst[768U];
    uint8_t snd[800U];
  } K___uint8_t_768size_t__uint8_t_800size_t_;

  K___uint8_t_768size_t__uint8_t_800size_t_
  libcrux_ml_kem_ind_cpa_generate_keypair__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_768size_t_800size_t_768size_t_3size_t_192size_t(
    Eurydice_slice key_generation_seed);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____H___2size_t(
    Eurydice_slice input,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cca_serialize_kem_secret_key__libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_1632size_t(
    Eurydice_slice private_key,
    Eurydice_slice public_key,
    Eurydice_slice implicit_rejection_value,
    uint8_t ret[1632U]);

  typedef struct libcrux_ml_kem_types_MlKemPrivateKey____1632size_t_s
  {
    uint8_t value[1632U];
  } libcrux_ml_kem_types_MlKemPrivateKey____1632size_t;

  libcrux_ml_kem_types_MlKemPrivateKey____1632size_t
  libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPrivateKey_SIZE___8__from___1632size_t(
    uint8_t value[1632U]);

  typedef struct libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t_s
  {
    libcrux_ml_kem_types_MlKemPrivateKey____1632size_t sk;
    libcrux_ml_kem_types_MlKemPublicKey____800size_t pk;
  } libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t;

  libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemKeyPair_PRIVATE_KEY_SIZE__PUBLIC_KEY_SIZE___from___1632size_t_800size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____1632size_t sk,
    libcrux_ml_kem_types_MlKemPublicKey____800size_t pk);

  libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t
  libcrux_ml_kem_ind_cca_generate_keypair_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_768size_t_1632size_t_800size_t_768size_t_3size_t_192size_t(
    Eurydice_slice ind_cpa_keypair_randomness,
    Eurydice_slice implicit_rejection_value);

  libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t
  libcrux_ml_kem_ind_cca_generate_keypair___2size_t_768size_t_1632size_t_800size_t_768size_t_3size_t_192size_t(
    uint8_t randomness[64U]);

  libcrux_ml_kem_types_MlKemKeyPair____1632size_t__800size_t
  libcrux_ml_kem_mlkem512_generate_key_pair(uint8_t randomness[64U]);

  uint8_t*
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPublicKey_SIZE__18__as_slice___800size_t(
    libcrux_ml_kem_types_MlKemPublicKey____800size_t* self);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced_closure__libcrux_ml_kem_vector_PortableVector_768size_t_2size_t(
    size_t _i);

  void
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced__libcrux_ml_kem_vector_PortableVector_768size_t_2size_t(
    Eurydice_slice public_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_sample_ring_element_cbd_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_128size_t_2size_t(
    size_t _i);

  void
    libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRFxN___2size_t_128size_t(
      uint8_t (*input)[33U],
      uint8_t ret[2U][128U]);

  K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_2size_t__uint8_t
  libcrux_ml_kem_ind_cpa_sample_ring_element_cbd__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_128size_t_2size_t(
    uint8_t prf_input[33U],
    uint8_t domain_separator);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRF___2size_t_128size_t(
    Eurydice_slice input,
    uint8_t ret[128U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_vector_u_closure__libcrux_ml_kem_vector_PortableVector_2size_t(
    size_t _i);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_montgomery__libcrux_ml_kem_vector_PortableVector_2size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  void libcrux_ml_kem_matrix_compute_vector_u__libcrux_ml_kem_vector_PortableVector_2size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector (
      *a_as_ntt)[2U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      r_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_1,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_ring_element_v__libcrux_ml_kem_vector_PortableVector_2size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      t_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      r_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_2,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      message);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_10__libcrux_ml_kem_vector_PortableVector_320size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[320U]);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_11__libcrux_ml_kem_vector_PortableVector_320size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[320U]);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_ring_element_u__libcrux_ml_kem_vector_PortableVector_10size_t_320size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re,
    uint8_t ret[320U]);

  void
  libcrux_ml_kem_ind_cpa_compress_then_serialize_u__libcrux_ml_kem_vector_PortableVector_2size_t_640size_t_10size_t_320size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      input[2U],
    Eurydice_slice out);

  void
  libcrux_ml_kem_serialize_compress_then_serialize_ring_element_v__libcrux_ml_kem_vector_PortableVector_4size_t_128size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      re,
    Eurydice_slice out);

  void
  libcrux_ml_kem_ind_cpa_encrypt__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_768size_t_768size_t_640size_t_128size_t_10size_t_4size_t_320size_t_3size_t_192size_t_2size_t_128size_t(
    Eurydice_slice public_key,
    uint8_t message[32U],
    Eurydice_slice randomness,
    uint8_t ret[768U]);

  typedef struct libcrux_ml_kem_types_MlKemCiphertext____768size_t_s
  {
    uint8_t value[768U];
  } libcrux_ml_kem_types_MlKemCiphertext____768size_t;

  typedef struct
    K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t__s
  {
    libcrux_ml_kem_types_MlKemCiphertext____768size_t fst;
    uint8_t snd[32U];
  } K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t_;

  K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t_
  libcrux_ml_kem_ind_cca_encapsulate_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_768size_t_800size_t_768size_t_640size_t_128size_t_10size_t_4size_t_320size_t_3size_t_192size_t_2size_t_128size_t(
    libcrux_ml_kem_types_MlKemPublicKey____800size_t* public_key,
    uint8_t randomness[32U]);

  K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t_
  libcrux_ml_kem_ind_cca_encapsulate___2size_t_768size_t_800size_t_768size_t_640size_t_128size_t_10size_t_4size_t_320size_t_3size_t_192size_t_2size_t_128size_t(
    libcrux_ml_kem_types_MlKemPublicKey____800size_t* public_key,
    uint8_t randomness[32U]);

  K___libcrux_ml_kem_types_MlKemCiphertext___768size_t___uint8_t_32size_t_
  libcrux_ml_kem_mlkem512_encapsulate(
    libcrux_ml_kem_types_MlKemPublicKey____800size_t* public_key,
    uint8_t randomness[32U]);

  K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPrivateKey_SIZE__12__split_at___1632size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____1632size_t* self,
    size_t mid);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_deserialize_then_decompress_u_closure__libcrux_ml_kem_vector_PortableVector_2size_t_768size_t_10size_t(
    size_t _);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_ring_element_u__libcrux_ml_kem_vector_PortableVector_10size_t(
    Eurydice_slice serialized);

  void
  libcrux_ml_kem_ntt_ntt_vector_u__libcrux_ml_kem_vector_PortableVector_10size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  void
  libcrux_ml_kem_ind_cpa_deserialize_then_decompress_u__libcrux_ml_kem_vector_PortableVector_2size_t_768size_t_10size_t(
    uint8_t* ciphertext,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_then_decompress_ring_element_v__libcrux_ml_kem_vector_PortableVector_4size_t(
    Eurydice_slice serialized);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_deserialize_secret_key_closure__libcrux_ml_kem_vector_PortableVector_2size_t(
    size_t _);

  void
  libcrux_ml_kem_ind_cpa_deserialize_secret_key__libcrux_ml_kem_vector_PortableVector_2size_t(
    Eurydice_slice secret_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[2U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_message__libcrux_ml_kem_vector_PortableVector_2size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      v,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      secret_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      u_as_ntt);

  void
  libcrux_ml_kem_ind_cpa_decrypt__libcrux_ml_kem_vector_PortableVector_2size_t_768size_t_640size_t_10size_t_4size_t(
    Eurydice_slice secret_key,
    uint8_t* ciphertext,
    uint8_t ret[32U]);

  void libcrux_ml_kem_ind_cpa_into_padded_array___800size_t(
    Eurydice_slice slice,
    uint8_t ret[800U]);

  Eurydice_slice
  libcrux_ml_kem_types___core__convert__AsRef__Slice_u8___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___1__as_ref___768size_t(
    libcrux_ml_kem_types_MlKemCiphertext____768size_t* self);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRF___2size_t_32size_t(
    Eurydice_slice input,
    uint8_t ret[32U]);

  uint8_t
  libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time___768size_t(
    Eurydice_slice lhs,
    Eurydice_slice rhs);

  void
  libcrux_ml_kem_ind_cca_decapsulate_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___2size_t___2size_t_1632size_t_768size_t_800size_t_768size_t_768size_t_640size_t_128size_t_10size_t_4size_t_320size_t_3size_t_192size_t_2size_t_128size_t_800size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____1632size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____768size_t* ciphertext,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cca_decapsulate___2size_t_1632size_t_768size_t_800size_t_768size_t_768size_t_640size_t_128size_t_10size_t_4size_t_320size_t_3size_t_192size_t_2size_t_128size_t_800size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____1632size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____768size_t* ciphertext,
    uint8_t ret[32U]);

  void libcrux_ml_kem_mlkem512_decapsulate(
    libcrux_ml_kem_types_MlKemPrivateKey____1632size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____768size_t* ciphertext,
    uint8_t ret[32U]);

#define LIBCRUX_ML_KEM_MLKEM768_RANK_768 ((size_t)3U)

#define LIBCRUX_ML_KEM_MLKEM768_RANKED_BYTES_PER_RING_ELEMENT_768              \
  (LIBCRUX_ML_KEM_MLKEM768_RANK_768 *                                          \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM768_T_AS_NTT_ENCODED_SIZE_768                      \
  (LIBCRUX_ML_KEM_MLKEM768_RANK_768 *                                          \
   LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM768_VECTOR_U_COMPRESSION_FACTOR_768 ((size_t)10U)

#define LIBCRUX_ML_KEM_MLKEM768_C1_BLOCK_SIZE_768                              \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_MLKEM768_VECTOR_U_COMPRESSION_FACTOR_768 / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM768_C1_SIZE_768                                    \
  (LIBCRUX_ML_KEM_MLKEM768_C1_BLOCK_SIZE_768 * LIBCRUX_ML_KEM_MLKEM768_RANK_768)

#define LIBCRUX_ML_KEM_MLKEM768_VECTOR_V_COMPRESSION_FACTOR_768 ((size_t)4U)

#define LIBCRUX_ML_KEM_MLKEM768_C2_SIZE_768                                    \
  (LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_MLKEM768_VECTOR_V_COMPRESSION_FACTOR_768 / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM768_CPA_PKE_SECRET_KEY_SIZE_768                    \
  (LIBCRUX_ML_KEM_MLKEM768_RANK_768 *                                          \
   LIBCRUX_ML_KEM_CONSTANTS_COEFFICIENTS_IN_RING_ELEMENT *                     \
   LIBCRUX_ML_KEM_CONSTANTS_BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_ML_KEM_MLKEM768_CPA_PKE_PUBLIC_KEY_SIZE_768                    \
  (LIBCRUX_ML_KEM_MLKEM768_T_AS_NTT_ENCODED_SIZE_768 + (size_t)32U)

#define LIBCRUX_ML_KEM_MLKEM768_CPA_PKE_CIPHERTEXT_SIZE_768                    \
  (LIBCRUX_ML_KEM_MLKEM768_C1_SIZE_768 + LIBCRUX_ML_KEM_MLKEM768_C2_SIZE_768)

#define LIBCRUX_ML_KEM_MLKEM768_SECRET_KEY_SIZE_768                            \
  (LIBCRUX_ML_KEM_MLKEM768_CPA_PKE_SECRET_KEY_SIZE_768 +                       \
   LIBCRUX_ML_KEM_MLKEM768_CPA_PKE_PUBLIC_KEY_SIZE_768 +                       \
   LIBCRUX_ML_KEM_CONSTANTS_H_DIGEST_SIZE +                                    \
   LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE)

#define LIBCRUX_ML_KEM_MLKEM768_ETA1 ((size_t)2U)

#define LIBCRUX_ML_KEM_MLKEM768_ETA1_RANDOMNESS_SIZE                           \
  (LIBCRUX_ML_KEM_MLKEM768_ETA1 * (size_t)64U)

#define LIBCRUX_ML_KEM_MLKEM768_ETA2 ((size_t)2U)

#define LIBCRUX_ML_KEM_MLKEM768_ETA2_RANDOMNESS_SIZE                           \
  (LIBCRUX_ML_KEM_MLKEM768_ETA2 * (size_t)64U)

#define LIBCRUX_ML_KEM_MLKEM768_IMPLICIT_REJECTION_HASH_INPUT_SIZE             \
  (LIBCRUX_ML_KEM_CONSTANTS_SHARED_SECRET_SIZE +                               \
   LIBCRUX_ML_KEM_MLKEM768_CPA_PKE_CIPHERTEXT_SIZE_768)

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced_closure__libcrux_ml_kem_vector_PortableVector_1184size_t_3size_t(
    size_t _i);

  void
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced__libcrux_ml_kem_vector_PortableVector_1184size_t_3size_t(
    Eurydice_slice public_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  void
  libcrux_ml_kem_ind_cpa_serialize_secret_key__libcrux_ml_kem_vector_PortableVector_3size_t_1152size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      key[3U],
    uint8_t ret[1152U]);

  void
  libcrux_ml_kem_ind_cpa_serialize_public_key__libcrux_ml_kem_vector_PortableVector_3size_t_1152size_t_1184size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      t_as_ntt[3U],
    Eurydice_slice seed_for_a,
    uint8_t ret[1184U]);

  bool
  libcrux_ml_kem_ind_cca_validate_public_key_generic__libcrux_ml_kem_vector_PortableVector_3size_t_1152size_t_1184size_t(
    uint8_t* public_key);

  bool
  libcrux_ml_kem_ind_cca_validate_public_key___3size_t_1152size_t_1184size_t(
    uint8_t* public_key);

  typedef struct libcrux_ml_kem_types_MlKemPublicKey____1184size_t_s
  {
    uint8_t value[1184U];
  } libcrux_ml_kem_types_MlKemPublicKey____1184size_t;

  typedef struct
    core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t___s
  {
    core_option_Option__size_t_tags tag;
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t f0;
  } core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t__;

  core_option_Option__libcrux_ml_kem_types_MlKemPublicKey___1184size_t__
  libcrux_ml_kem_mlkem768_validate_public_key(
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t public_key);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____G___3size_t(
    Eurydice_slice input,
    uint8_t ret[64U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_sample_matrix_A_closure_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t(
    size_t _j);

  void
  libcrux_ml_kem_matrix_sample_matrix_A_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t(
    size_t _i,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  typedef struct
    libcrux_ml_kem_hash_functions_portable_PortableHash____3size_t_s
  {
    libcrux_sha3_portable_KeccakState1 shake128_state[3U];
  } libcrux_ml_kem_hash_functions_portable_PortableHash____3size_t;

  libcrux_ml_kem_hash_functions_portable_PortableHash____3size_t
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_init_absorb___3size_t(
    uint8_t input[3U][34U]);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_squeeze_three_blocks___3size_t(
    libcrux_ml_kem_hash_functions_portable_PortableHash____3size_t* self,
    uint8_t ret[3U][504U]);

  bool
  libcrux_ml_kem_sampling_sample_from_uniform_distribution_next__libcrux_ml_kem_vector_PortableVector_3size_t_504size_t(
    uint8_t randomness[3U][504U],
    size_t* sampled_coefficients,
    int16_t (*out)[272U]);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____shake128_squeeze_block___3size_t(
    libcrux_ml_kem_hash_functions_portable_PortableHash____3size_t* self,
    uint8_t ret[3U][168U]);

  bool
  libcrux_ml_kem_sampling_sample_from_uniform_distribution_next__libcrux_ml_kem_vector_PortableVector_3size_t_168size_t(
    uint8_t randomness[3U][168U],
    size_t* sampled_coefficients,
    int16_t (*out)[272U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_sampling_sample_from_xof_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t(
    int16_t s[272U]);

  void
  libcrux_ml_kem_sampling_sample_from_xof__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t(
    uint8_t seeds[3U][34U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  void
  libcrux_ml_kem_matrix_sample_matrix_A__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t(
    uint8_t seed[34U],
    bool transpose,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U][3U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_2size_t_128size_t(
    size_t _i);

  void
    libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRFxN___3size_t_128size_t(
      uint8_t (*input)[33U],
      uint8_t ret[3U][128U]);

  typedef struct
    K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t__uint8_t_s
  {
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      fst[3U];
    uint8_t snd;
  } K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t__uint8_t;

  K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t__uint8_t
  libcrux_ml_kem_ind_cpa_sample_vector_cbd_then_ntt__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_2size_t_128size_t(
    uint8_t prf_input[33U],
    uint8_t domain_separator);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_As_plus_e_closure__libcrux_ml_kem_vector_PortableVector_3size_t(
    size_t _i);

  void
  libcrux_ml_kem_polynomial__libcrux_ml_kem__polynomial__PolynomialRingElement_Vector__TraitClause_0___add_to_ring_element__libcrux_ml_kem_vector_PortableVector_3size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      self,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      rhs);

  void libcrux_ml_kem_matrix_compute_As_plus_e__libcrux_ml_kem_vector_PortableVector_3size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector (
      *matrix_A)[3U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      s_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  typedef struct K___uint8_t_1152size_t__uint8_t_1184size_t__s
  {
    uint8_t fst[1152U];
    uint8_t snd[1184U];
  } K___uint8_t_1152size_t__uint8_t_1184size_t_;

  K___uint8_t_1152size_t__uint8_t_1184size_t_
  libcrux_ml_kem_ind_cpa_generate_keypair__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_1152size_t_1184size_t_1152size_t_2size_t_128size_t(
    Eurydice_slice key_generation_seed);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____H___3size_t(
    Eurydice_slice input,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cca_serialize_kem_secret_key__libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_2400size_t(
    Eurydice_slice private_key,
    Eurydice_slice public_key,
    Eurydice_slice implicit_rejection_value,
    uint8_t ret[2400U]);

  typedef struct libcrux_ml_kem_types_MlKemPrivateKey____2400size_t_s
  {
    uint8_t value[2400U];
  } libcrux_ml_kem_types_MlKemPrivateKey____2400size_t;

  libcrux_ml_kem_types_MlKemPrivateKey____2400size_t
  libcrux_ml_kem_types___core__convert__From__Array_u8__SIZE___for_libcrux_ml_kem__types__MlKemPrivateKey_SIZE___8__from___2400size_t(
    uint8_t value[2400U]);

  typedef struct libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t_s
  {
    libcrux_ml_kem_types_MlKemPrivateKey____2400size_t sk;
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t pk;
  } libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t;

  libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemKeyPair_PRIVATE_KEY_SIZE__PUBLIC_KEY_SIZE___from___2400size_t_1184size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____2400size_t sk,
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t pk);

  libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t
  libcrux_ml_kem_ind_cca_generate_keypair_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_1152size_t_2400size_t_1184size_t_1152size_t_2size_t_128size_t(
    Eurydice_slice ind_cpa_keypair_randomness,
    Eurydice_slice implicit_rejection_value);

  libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t
  libcrux_ml_kem_ind_cca_generate_keypair___3size_t_1152size_t_2400size_t_1184size_t_1152size_t_2size_t_128size_t(
    uint8_t randomness[64U]);

  libcrux_ml_kem_types_MlKemKeyPair____2400size_t__1184size_t
  libcrux_ml_kem_mlkem768_generate_key_pair(uint8_t randomness[64U]);

  uint8_t*
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPublicKey_SIZE__18__as_slice___1184size_t(
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t* self);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced_closure__libcrux_ml_kem_vector_PortableVector_1152size_t_3size_t(
    size_t _i);

  void
  libcrux_ml_kem_serialize_deserialize_ring_elements_reduced__libcrux_ml_kem_vector_PortableVector_1152size_t_3size_t(
    Eurydice_slice public_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_sample_ring_element_cbd_closure__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_128size_t_2size_t(
    size_t _i);

  K___libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector_3size_t__uint8_t
  libcrux_ml_kem_ind_cpa_sample_ring_element_cbd__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_128size_t_2size_t(
    uint8_t prf_input[33U],
    uint8_t domain_separator);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRF___3size_t_128size_t(
    Eurydice_slice input,
    uint8_t ret[128U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_vector_u_closure__libcrux_ml_kem_vector_PortableVector_3size_t(
    size_t _i);

  void
  libcrux_ml_kem_invert_ntt_invert_ntt_montgomery__libcrux_ml_kem_vector_PortableVector_3size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      re);

  void libcrux_ml_kem_matrix_compute_vector_u__libcrux_ml_kem_vector_PortableVector_3size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector (
      *a_as_ntt)[3U],
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      r_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_1,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_ring_element_v__libcrux_ml_kem_vector_PortableVector_3size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      t_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      r_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      error_2,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      message);

  void
  libcrux_ml_kem_ind_cpa_compress_then_serialize_u__libcrux_ml_kem_vector_PortableVector_3size_t_960size_t_10size_t_320size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      input[3U],
    Eurydice_slice out);

  void
  libcrux_ml_kem_ind_cpa_encrypt__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_1088size_t_1152size_t_960size_t_128size_t_10size_t_4size_t_320size_t_2size_t_128size_t_2size_t_128size_t(
    Eurydice_slice public_key,
    uint8_t message[32U],
    Eurydice_slice randomness,
    uint8_t ret[1088U]);

  typedef struct libcrux_ml_kem_types_MlKemCiphertext____1088size_t_s
  {
    uint8_t value[1088U];
  } libcrux_ml_kem_types_MlKemCiphertext____1088size_t;

  typedef struct
    K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t__s
  {
    libcrux_ml_kem_types_MlKemCiphertext____1088size_t fst;
    uint8_t snd[32U];
  } K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t_;

  K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t_
  libcrux_ml_kem_ind_cca_encapsulate_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_1088size_t_1184size_t_1152size_t_960size_t_128size_t_10size_t_4size_t_320size_t_2size_t_128size_t_2size_t_128size_t(
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t* public_key,
    uint8_t randomness[32U]);

  K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t_
  libcrux_ml_kem_ind_cca_encapsulate___3size_t_1088size_t_1184size_t_1152size_t_960size_t_128size_t_10size_t_4size_t_320size_t_2size_t_128size_t_2size_t_128size_t(
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t* public_key,
    uint8_t randomness[32U]);

  K___libcrux_ml_kem_types_MlKemCiphertext___1088size_t___uint8_t_32size_t_
  libcrux_ml_kem_mlkem768_encapsulate(
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t* public_key,
    uint8_t randomness[32U]);

  K___Eurydice_slice_uint8_t_Eurydice_slice_uint8_t
  libcrux_ml_kem_types__libcrux_ml_kem__types__MlKemPrivateKey_SIZE__12__split_at___2400size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____2400size_t* self,
    size_t mid);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_deserialize_then_decompress_u_closure__libcrux_ml_kem_vector_PortableVector_3size_t_1088size_t_10size_t(
    size_t _);

  void
  libcrux_ml_kem_ind_cpa_deserialize_then_decompress_u__libcrux_ml_kem_vector_PortableVector_3size_t_1088size_t_10size_t(
    uint8_t* ciphertext,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_ind_cpa_deserialize_secret_key_closure__libcrux_ml_kem_vector_PortableVector_3size_t(
    size_t _);

  void
  libcrux_ml_kem_ind_cpa_deserialize_secret_key__libcrux_ml_kem_vector_PortableVector_3size_t(
    Eurydice_slice secret_key,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
      ret[3U]);

  libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector
  libcrux_ml_kem_matrix_compute_message__libcrux_ml_kem_vector_PortableVector_3size_t(
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      v,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      secret_as_ntt,
    libcrux_ml_kem_polynomial_PolynomialRingElement__libcrux_ml_kem_vector_PortableVector*
      u_as_ntt);

  void
  libcrux_ml_kem_ind_cpa_decrypt__libcrux_ml_kem_vector_PortableVector_3size_t_1088size_t_960size_t_10size_t_4size_t(
    Eurydice_slice secret_key,
    uint8_t* ciphertext,
    uint8_t ret[32U]);

  void libcrux_ml_kem_ind_cpa_into_padded_array___1120size_t(
    Eurydice_slice slice,
    uint8_t ret[1120U]);

  Eurydice_slice
  libcrux_ml_kem_types___core__convert__AsRef__Slice_u8___for_libcrux_ml_kem__types__MlKemCiphertext_SIZE___1__as_ref___1088size_t(
    libcrux_ml_kem_types_MlKemCiphertext____1088size_t* self);

  void
  libcrux_ml_kem_hash_functions_portable___libcrux_ml_kem__hash_functions__Hash_K__for_libcrux_ml_kem__hash_functions__portable__PortableHash_K____PRF___3size_t_32size_t(
    Eurydice_slice input,
    uint8_t ret[32U]);

  uint8_t
  libcrux_ml_kem_constant_time_ops_compare_ciphertexts_in_constant_time___1088size_t(
    Eurydice_slice lhs,
    Eurydice_slice rhs);

  void
  libcrux_ml_kem_ind_cca_decapsulate_generic__libcrux_ml_kem_vector_PortableVector_libcrux_ml_kem_hash_functions_portable_PortableHash___3size_t___3size_t_2400size_t_1152size_t_1184size_t_1088size_t_1152size_t_960size_t_128size_t_10size_t_4size_t_320size_t_2size_t_128size_t_2size_t_128size_t_1120size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____2400size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____1088size_t* ciphertext,
    uint8_t ret[32U]);

  void
  libcrux_ml_kem_ind_cca_decapsulate___3size_t_2400size_t_1152size_t_1184size_t_1088size_t_1152size_t_960size_t_128size_t_10size_t_4size_t_320size_t_2size_t_128size_t_2size_t_128size_t_1120size_t(
    libcrux_ml_kem_types_MlKemPrivateKey____2400size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____1088size_t* ciphertext,
    uint8_t ret[32U]);

  void libcrux_ml_kem_mlkem768_decapsulate(
    libcrux_ml_kem_types_MlKemPrivateKey____2400size_t* private_key,
    libcrux_ml_kem_types_MlKemCiphertext____1088size_t* ciphertext,
    uint8_t ret[32U]);


  static inline libcrux_ml_kem_types_MlKemPublicKey____1184size_t
  core_convert___core__convert__Into_libcrux_ml_kem_types_MlKemPublicKey____1184size_t(
    uint8_t src[1184])
  {
    libcrux_ml_kem_types_MlKemPublicKey____1184size_t out;
    memcpy(out.value, src, 1184);
    return out;
  }
  static inline libcrux_ml_kem_types_MlKemPublicKey____1568size_t
  core_convert___core__convert__Into_libcrux_ml_kem_types_MlKemPublicKey____1568size_t(
    uint8_t src[1568])
  {
    libcrux_ml_kem_types_MlKemPublicKey____1568size_t out;
    memcpy(out.value, src, 1568);
    return out;
  }
  static inline libcrux_ml_kem_types_MlKemCiphertext____1088size_t
  core_convert___core__convert__Into_libcrux_ml_kem_types_MlKemCiphertext____1088size_t(
    uint8_t src[1088])
  {
    libcrux_ml_kem_types_MlKemCiphertext____1088size_t out;
    memcpy(out.value, src, 1088);
    return out;
  }

  static inline libcrux_ml_kem_types_MlKemCiphertext____768size_t
  core_convert___core__convert__Into_libcrux_ml_kem_types_MlKemCiphertext____768size_t(
    uint8_t src[768])
  {
    libcrux_ml_kem_types_MlKemCiphertext____768size_t out;
    memcpy(out.value, src, 768);
    return out;
  }

  static inline libcrux_ml_kem_types_MlKemPublicKey____800size_t
  core_convert___core__convert__Into_libcrux_ml_kem_types_MlKemPublicKey____800size_t(
    uint8_t src[800])
  {
    libcrux_ml_kem_types_MlKemPublicKey____800size_t out;
    memcpy(out.value, src, 800);
    return out;
  }
  static inline libcrux_ml_kem_types_MlKemCiphertext____1568size_t
  core_convert___core__convert__Into_libcrux_ml_kem_types_MlKemCiphertext____1568size_t(
    uint8_t src[1568])
  {
    libcrux_ml_kem_types_MlKemCiphertext____1568size_t out;
    memcpy(out.value, src, 1568);
    return out;
  }

#if defined(__cplusplus)
}
#endif

#define __libcrux_ml_kem_H_DEFINED
#endif
