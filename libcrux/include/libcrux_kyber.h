/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: ../../../eurydice/eurydice --config ../../kyber-c.yaml ../libcrux_kyber.llbc
  F* version: c990b3ca
  KaRaMeL version: 391b72f8
 */

#ifndef __libcrux_kyber_H
#define __libcrux_kyber_H

#include "libcrux_digest.h"
#include "core.h"
#include "eurydice_glue.h"

#define LIBCRUX_KYBER_KYBER512_RANK_512 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER512_RANKED_BYTES_PER_RING_ELEMENT_512 (LIBCRUX_KYBER_KYBER512_RANK_512 * BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_T_AS_NTT_ENCODED_SIZE_512 (LIBCRUX_KYBER_KYBER512_RANK_512 * COEFFICIENTS_IN_RING_ELEMENT * BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_VECTOR_U_COMPRESSION_FACTOR_512 ((size_t)10U)

#define LIBCRUX_KYBER_KYBER512_C1_BLOCK_SIZE_512 (COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER512_VECTOR_U_COMPRESSION_FACTOR_512 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_C1_SIZE_512 (LIBCRUX_KYBER_KYBER512_C1_BLOCK_SIZE_512 * LIBCRUX_KYBER_KYBER512_RANK_512)

#define LIBCRUX_KYBER_KYBER512_VECTOR_V_COMPRESSION_FACTOR_512 ((size_t)4U)

#define LIBCRUX_KYBER_KYBER512_C2_SIZE_512 (COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER512_VECTOR_V_COMPRESSION_FACTOR_512 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_CPA_PKE_SECRET_KEY_SIZE_512 (LIBCRUX_KYBER_KYBER512_RANK_512 * COEFFICIENTS_IN_RING_ELEMENT * BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER512_CPA_PKE_PUBLIC_KEY_SIZE_512 (LIBCRUX_KYBER_KYBER512_T_AS_NTT_ENCODED_SIZE_512 + (size_t)32U)

#define LIBCRUX_KYBER_KYBER512_CPA_PKE_CIPHERTEXT_SIZE_512 (LIBCRUX_KYBER_KYBER512_C1_SIZE_512 + LIBCRUX_KYBER_KYBER512_C2_SIZE_512)

#define LIBCRUX_KYBER_KYBER512_SECRET_KEY_SIZE_512 (LIBCRUX_KYBER_KYBER512_CPA_PKE_SECRET_KEY_SIZE_512 + LIBCRUX_KYBER_KYBER512_CPA_PKE_PUBLIC_KEY_SIZE_512 + H_DIGEST_SIZE + SHARED_SECRET_SIZE)

#define LIBCRUX_KYBER_KYBER512_ETA1 ((size_t)3U)

#define LIBCRUX_KYBER_KYBER512_ETA1_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER512_ETA1 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER512_ETA2 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER512_ETA2_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER512_ETA2 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER512_IMPLICIT_REJECTION_HASH_INPUT_SIZE (SHARED_SECRET_SIZE + LIBCRUX_KYBER_KYBER512_CPA_PKE_CIPHERTEXT_SIZE_512)

typedef uint8_t libcrux_kyber_types_MlKemPublicKey___800size_t[800U];

typedef struct core_option_Option__libcrux_kyber_types_MlKemPublicKey__800size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_kyber_types_MlKemPublicKey___800size_t f0;
}
core_option_Option__libcrux_kyber_types_MlKemPublicKey__800size_t__;

core_option_Option__libcrux_kyber_types_MlKemPublicKey__800size_t__
libcrux_kyber_kyber512_validate_public_key(uint8_t public_key[800U]);

typedef struct libcrux_kyber_types_MlKemKeyPair___1632size_t_800size_t_s
{
  uint8_t sk[1632U];
  uint8_t pk[800U];
}
libcrux_kyber_types_MlKemKeyPair___1632size_t_800size_t;

libcrux_kyber_types_MlKemKeyPair___1632size_t_800size_t
libcrux_kyber_kyber512_generate_key_pair(uint8_t randomness[64U]);

typedef struct libcrux_kyber_MlKemState___2size_t_s
{
  int32_t secret_as_ntt[2U][256U];
  int32_t t_as_ntt[2U][256U];
  int32_t a_transpose[2U][2U][256U];
  uint8_t rej[32U];
  uint8_t ind_cpa_public_key_hash[32U];
}
libcrux_kyber_MlKemState___2size_t;

typedef struct
K___libcrux_kyber_MlKemState__2size_t___libcrux_kyber_types_MlKemPublicKey__800size_t___s
{
  libcrux_kyber_MlKemState___2size_t fst;
  uint8_t snd[800U];
}
K___libcrux_kyber_MlKemState__2size_t___libcrux_kyber_types_MlKemPublicKey__800size_t__;

K___libcrux_kyber_MlKemState__2size_t___libcrux_kyber_types_MlKemPublicKey__800size_t__
libcrux_kyber_kyber512_generate_key_pair_unpacked(uint8_t randomness[64U]);

typedef struct K___libcrux_kyber_types_MlKemCiphertext__768size_t___uint8_t_32size_t__s
{
  uint8_t fst[768U];
  uint8_t snd[32U];
}
K___libcrux_kyber_types_MlKemCiphertext__768size_t___uint8_t_32size_t_;

K___libcrux_kyber_types_MlKemCiphertext__768size_t___uint8_t_32size_t_
libcrux_kyber_kyber512_encapsulate(uint8_t (*public_key)[800U], uint8_t randomness[32U]);

void
libcrux_kyber_kyber512_decapsulate(
  uint8_t (*secret_key)[1632U],
  uint8_t (*ciphertext)[768U],
  uint8_t ret[32U]
);

void
libcrux_kyber_kyber512_decapsulate_unpacked(
  libcrux_kyber_MlKemState___2size_t *state,
  uint8_t (*ciphertext)[768U],
  uint8_t ret[32U]
);

#define LIBCRUX_KYBER_KYBER768_RANK_768 ((size_t)3U)

#define LIBCRUX_KYBER_KYBER768_RANKED_BYTES_PER_RING_ELEMENT_768 (LIBCRUX_KYBER_KYBER768_RANK_768 * BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER768_T_AS_NTT_ENCODED_SIZE_768 (LIBCRUX_KYBER_KYBER768_RANK_768 * COEFFICIENTS_IN_RING_ELEMENT * BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER768_VECTOR_U_COMPRESSION_FACTOR_768 ((size_t)10U)

#define LIBCRUX_KYBER_KYBER768_C1_BLOCK_SIZE_768 (COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER768_VECTOR_U_COMPRESSION_FACTOR_768 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER768_C1_SIZE_768 (LIBCRUX_KYBER_KYBER768_C1_BLOCK_SIZE_768 * LIBCRUX_KYBER_KYBER768_RANK_768)

#define LIBCRUX_KYBER_KYBER768_VECTOR_V_COMPRESSION_FACTOR_768 ((size_t)4U)

#define LIBCRUX_KYBER_KYBER768_C2_SIZE_768 (COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER768_VECTOR_V_COMPRESSION_FACTOR_768 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER768_CPA_PKE_SECRET_KEY_SIZE_768 (LIBCRUX_KYBER_KYBER768_RANK_768 * COEFFICIENTS_IN_RING_ELEMENT * BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER768_CPA_PKE_PUBLIC_KEY_SIZE_768 (LIBCRUX_KYBER_KYBER768_T_AS_NTT_ENCODED_SIZE_768 + (size_t)32U)

#define LIBCRUX_KYBER_KYBER768_CPA_PKE_CIPHERTEXT_SIZE_768 (LIBCRUX_KYBER_KYBER768_C1_SIZE_768 + LIBCRUX_KYBER_KYBER768_C2_SIZE_768)

#define LIBCRUX_KYBER_KYBER768_SECRET_KEY_SIZE_768 (LIBCRUX_KYBER_KYBER768_CPA_PKE_SECRET_KEY_SIZE_768 + LIBCRUX_KYBER_KYBER768_CPA_PKE_PUBLIC_KEY_SIZE_768 + H_DIGEST_SIZE + SHARED_SECRET_SIZE)

#define LIBCRUX_KYBER_KYBER768_ETA1 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER768_ETA1_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER768_ETA1 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER768_ETA2 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER768_ETA2_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER768_ETA2 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER768_IMPLICIT_REJECTION_HASH_INPUT_SIZE (SHARED_SECRET_SIZE + LIBCRUX_KYBER_KYBER768_CPA_PKE_CIPHERTEXT_SIZE_768)

typedef uint8_t libcrux_kyber_types_MlKemPublicKey___1184size_t[1184U];

typedef struct core_option_Option__libcrux_kyber_types_MlKemPublicKey__1184size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_kyber_types_MlKemPublicKey___1184size_t f0;
}
core_option_Option__libcrux_kyber_types_MlKemPublicKey__1184size_t__;

core_option_Option__libcrux_kyber_types_MlKemPublicKey__1184size_t__
libcrux_kyber_kyber768_validate_public_key(uint8_t public_key[1184U]);

typedef struct libcrux_kyber_types_MlKemKeyPair___2400size_t_1184size_t_s
{
  uint8_t sk[2400U];
  uint8_t pk[1184U];
}
libcrux_kyber_types_MlKemKeyPair___2400size_t_1184size_t;

libcrux_kyber_types_MlKemKeyPair___2400size_t_1184size_t
libcrux_kyber_kyber768_generate_key_pair(uint8_t randomness[64U]);

typedef struct libcrux_kyber_MlKemState___3size_t_s
{
  int32_t secret_as_ntt[3U][256U];
  int32_t t_as_ntt[3U][256U];
  int32_t a_transpose[3U][3U][256U];
  uint8_t rej[32U];
  uint8_t ind_cpa_public_key_hash[32U];
}
libcrux_kyber_MlKemState___3size_t;

typedef struct
K___libcrux_kyber_MlKemState__3size_t___libcrux_kyber_types_MlKemPublicKey__1184size_t___s
{
  libcrux_kyber_MlKemState___3size_t fst;
  uint8_t snd[1184U];
}
K___libcrux_kyber_MlKemState__3size_t___libcrux_kyber_types_MlKemPublicKey__1184size_t__;

K___libcrux_kyber_MlKemState__3size_t___libcrux_kyber_types_MlKemPublicKey__1184size_t__
libcrux_kyber_kyber768_generate_key_pair_unpacked(uint8_t randomness[64U]);

typedef struct K___libcrux_kyber_types_MlKemCiphertext__1088size_t___uint8_t_32size_t__s
{
  uint8_t fst[1088U];
  uint8_t snd[32U];
}
K___libcrux_kyber_types_MlKemCiphertext__1088size_t___uint8_t_32size_t_;

K___libcrux_kyber_types_MlKemCiphertext__1088size_t___uint8_t_32size_t_
libcrux_kyber_kyber768_encapsulate(uint8_t (*public_key)[1184U], uint8_t randomness[32U]);

void
libcrux_kyber_kyber768_decapsulate(
  uint8_t (*secret_key)[2400U],
  uint8_t (*ciphertext)[1088U],
  uint8_t ret[32U]
);

void
libcrux_kyber_kyber768_decapsulate_unpacked(
  libcrux_kyber_MlKemState___3size_t *state,
  uint8_t (*ciphertext)[1088U],
  uint8_t ret[32U]
);

#define LIBCRUX_KYBER_KYBER1024_RANK_1024 ((size_t)4U)

#define LIBCRUX_KYBER_KYBER1024_RANKED_BYTES_PER_RING_ELEMENT_1024 (LIBCRUX_KYBER_KYBER1024_RANK_1024 * BITS_PER_RING_ELEMENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_T_AS_NTT_ENCODED_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_RANK_1024 * COEFFICIENTS_IN_RING_ELEMENT * BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_VECTOR_U_COMPRESSION_FACTOR_1024 ((size_t)11U)

#define LIBCRUX_KYBER_KYBER1024_C1_BLOCK_SIZE_1024 (COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER1024_VECTOR_U_COMPRESSION_FACTOR_1024 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_C1_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_C1_BLOCK_SIZE_1024 * LIBCRUX_KYBER_KYBER1024_RANK_1024)

#define LIBCRUX_KYBER_KYBER1024_VECTOR_V_COMPRESSION_FACTOR_1024 ((size_t)5U)

#define LIBCRUX_KYBER_KYBER1024_C2_SIZE_1024 (COEFFICIENTS_IN_RING_ELEMENT * LIBCRUX_KYBER_KYBER1024_VECTOR_V_COMPRESSION_FACTOR_1024 / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_CPA_PKE_SECRET_KEY_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_RANK_1024 * COEFFICIENTS_IN_RING_ELEMENT * BITS_PER_COEFFICIENT / (size_t)8U)

#define LIBCRUX_KYBER_KYBER1024_CPA_PKE_PUBLIC_KEY_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_T_AS_NTT_ENCODED_SIZE_1024 + (size_t)32U)

#define LIBCRUX_KYBER_KYBER1024_CPA_PKE_CIPHERTEXT_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_C1_SIZE_1024 + LIBCRUX_KYBER_KYBER1024_C2_SIZE_1024)

#define LIBCRUX_KYBER_KYBER1024_SECRET_KEY_SIZE_1024 (LIBCRUX_KYBER_KYBER1024_CPA_PKE_SECRET_KEY_SIZE_1024 + LIBCRUX_KYBER_KYBER1024_CPA_PKE_PUBLIC_KEY_SIZE_1024 + H_DIGEST_SIZE + SHARED_SECRET_SIZE)

#define LIBCRUX_KYBER_KYBER1024_ETA1 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER1024_ETA1_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER1024_ETA1 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER1024_ETA2 ((size_t)2U)

#define LIBCRUX_KYBER_KYBER1024_ETA2_RANDOMNESS_SIZE (LIBCRUX_KYBER_KYBER1024_ETA2 * (size_t)64U)

#define LIBCRUX_KYBER_KYBER1024_IMPLICIT_REJECTION_HASH_INPUT_SIZE (SHARED_SECRET_SIZE + LIBCRUX_KYBER_KYBER1024_CPA_PKE_CIPHERTEXT_SIZE_1024)

typedef uint8_t libcrux_kyber_types_MlKemPublicKey___1568size_t[1568U];

typedef struct core_option_Option__libcrux_kyber_types_MlKemPublicKey__1568size_t___s
{
  core_option_Option__size_t_tags tag;
  libcrux_kyber_types_MlKemPublicKey___1568size_t f0;
}
core_option_Option__libcrux_kyber_types_MlKemPublicKey__1568size_t__;

core_option_Option__libcrux_kyber_types_MlKemPublicKey__1568size_t__
libcrux_kyber_kyber1024_validate_public_key(uint8_t public_key[1568U]);

typedef struct libcrux_kyber_types_MlKemKeyPair___3168size_t_1568size_t_s
{
  uint8_t sk[3168U];
  uint8_t pk[1568U];
}
libcrux_kyber_types_MlKemKeyPair___3168size_t_1568size_t;

libcrux_kyber_types_MlKemKeyPair___3168size_t_1568size_t
libcrux_kyber_kyber1024_generate_key_pair(uint8_t randomness[64U]);

typedef struct libcrux_kyber_MlKemState___4size_t_s
{
  int32_t secret_as_ntt[4U][256U];
  int32_t t_as_ntt[4U][256U];
  int32_t a_transpose[4U][4U][256U];
  uint8_t rej[32U];
  uint8_t ind_cpa_public_key_hash[32U];
}
libcrux_kyber_MlKemState___4size_t;

typedef struct
K___libcrux_kyber_MlKemState__4size_t___libcrux_kyber_types_MlKemPublicKey__1568size_t___s
{
  libcrux_kyber_MlKemState___4size_t fst;
  uint8_t snd[1568U];
}
K___libcrux_kyber_MlKemState__4size_t___libcrux_kyber_types_MlKemPublicKey__1568size_t__;

K___libcrux_kyber_MlKemState__4size_t___libcrux_kyber_types_MlKemPublicKey__1568size_t__
libcrux_kyber_kyber1024_generate_key_pair_unpacked(uint8_t randomness[64U]);

typedef struct K___libcrux_kyber_types_MlKemCiphertext__1568size_t___uint8_t_32size_t__s
{
  uint8_t fst[1568U];
  uint8_t snd[32U];
}
K___libcrux_kyber_types_MlKemCiphertext__1568size_t___uint8_t_32size_t_;

K___libcrux_kyber_types_MlKemCiphertext__1568size_t___uint8_t_32size_t_
libcrux_kyber_kyber1024_encapsulate(uint8_t (*public_key)[1568U], uint8_t randomness[32U]);

void
libcrux_kyber_kyber1024_decapsulate(
  uint8_t (*secret_key)[3168U],
  uint8_t (*ciphertext)[1568U],
  uint8_t ret[32U]
);

void
libcrux_kyber_kyber1024_decapsulate_unpacked(
  libcrux_kyber_MlKemState___4size_t *state,
  uint8_t (*ciphertext)[1568U],
  uint8_t ret[32U]
);

extern libcrux_digest_incremental_x4_Shake128StateX4
libcrux_digest_incremental_x4__libcrux__digest__incremental_x4__Shake128StateX4__new(void);

#define libcrux_digest_incremental_x4__libcrux__digest__incremental_x4__Shake128StateX4__absorb_final(x_0, x_1, x_2, _ret_t) libcrux_digest_incremental_x4__libcrux__digest__incremental_x4__Shake128StateX4__absorb_final_(x_0, x_1, x_2)

extern void
libcrux_digest_incremental_x4__libcrux__digest__incremental_x4__Shake128StateX4__absorb_final_(
  size_t x0,
  libcrux_digest_incremental_x4_Shake128StateX4 *x1,
  Eurydice_slice *x2
);

extern void
libcrux_digest_incremental_x4__libcrux__digest__incremental_x4__Shake128StateX4__free_memory(
  libcrux_digest_incremental_x4_Shake128StateX4 x0
);


#define __libcrux_kyber_H_DEFINED
#endif
