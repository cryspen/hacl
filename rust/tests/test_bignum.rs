mod test_util;

use regex::Regex;
use std::fmt;

use hacl_rust::bignum::BigUInt;

use data_encoding::HEXUPPER;
use rand::prelude::SmallRng;
use rand::{RngCore, SeedableRng};

#[test]
fn test_to_from() {
    let trials = 1_000;
    let mut small_rng = SmallRng::seed_from_u64(2038_u64);

    #[derive(Clone)]
    struct Failure {
        in_data: Vec<u8>,
        out_data: Vec<u8>,
        bad_prefix: Option<Vec<u8>>,
        trial: u32,
    }
    impl fmt::Debug for Failure {
        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt.debug_struct("Failure")
                .field("in", &format_args!("{:?}\n", &self.in_data))
                .field("out", &format_args!("{:?}\n", &self.out_data))
                .field("bad_prefix", &format_args!("{:?}\n", &self.bad_prefix))
                .field("trial", &format_args!("{:?}\n", &self.trial))
                .finish()
        }
    }

    // Less verbose than {:?}
    impl fmt::Display for Failure {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            writeln!(
                f,
                "(in.len: {}, out.len: {}, bad_prefix: {:?}, trial: {})",
                self.in_data.len(),
                self.out_data.len(),
                self.bad_prefix,
                self.trial
            )
        }
    }
    #[derive(Clone)]
    struct FailureVec(Vec<Failure>);

    // There is probably a better way to get FailureVec to inherit
    // Vec methods, but I only need two.
    impl FailureVec {
        fn is_empty(&self) -> bool {
            self.0.is_empty()
        }
        fn len(&self) -> usize {
            self.0.len()
        }
        fn push(&mut self, v: Failure) {
            self.0.push(v)
        }
    }

    impl fmt::Display for FailureVec {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            writeln!(f, "Failures:")?;
            for v in &self.0 {
                write!(f, "\t{}", v)?;
            }
            Ok(())
        }
    }

    let mut failures: FailureVec = FailureVec(Vec::new());

    const TEST_SIZE: usize = BigUInt::BN_BYTE_LENGTH - 17;
    // const TEST_SIZE: usize = Bignum::BN_BYTE_LENGTH - 14;

    for trial in 1..=trials {
        let mut dest: [u8; TEST_SIZE] = [0; TEST_SIZE];
        small_rng.fill_bytes(&mut dest);

        let in_data = dest;
        let in_vec = dest.to_vec();

        let bn = BigUInt::new(&in_data).unwrap();
        let b_vec = bn.to_vec8().unwrap();

        let mut trimmed_b: Vec<u8> = Vec::new();
        let len_diff = b_vec.len() - in_vec.len();
        let mut should_be_zeros_but_isnt: Vec<u8> = vec![0; len_diff];
        if len_diff > 0 {
            trimmed_b = if let Some(v) = b_vec.strip_prefix(vec![0_u8; len_diff].as_slice()) {
                v.to_vec()
            } else {
                should_be_zeros_but_isnt = b_vec[..len_diff].to_vec();
                b_vec.to_vec()
            }
        }
        let bad_prefix = if should_be_zeros_but_isnt.iter().any(|&x| x != 0_u8) {
            Some(should_be_zeros_but_isnt)
        } else {
            None
        };

        if !trimmed_b.eq(&in_vec) {
            let f = &Failure {
                in_data: in_data.to_vec(),
                out_data: b_vec.clone(),
                bad_prefix,
                trial,
            };
            failures.push(f.clone());
        }
    }

    // If you want the gory details of each failure use the format string
    // with the "{:?}" for failures.
    assert!(
        failures.is_empty(),
        "{}\nThere were {} in-out failure(s) out of {} trials",
        // "{:?}\nThere were {} in-out failure(s) out of {} trials",
        failures,
        failures.len(),
        trials
    );
}

#[test]
#[allow(clippy::neg_cmp_op_on_partial_ord)]
fn test_partial_ord() {
    let trials = 1_000;
    let mut small_rng = SmallRng::seed_from_u64(123_u64);

    // let byte_size = Bignum::BN_BYTE_LENGTH - 256;
    let byte_size = BigUInt::BN_BYTE_LENGTH;
    let dest = &mut vec![0; byte_size];
    for trial in 0..trials {
        // we create random a: u128 and a_bn: Bignum
        // which should have same numeric value.
        // And we do the same for b and b_bn.
        small_rng.fill_bytes(dest);
        let a = dest.to_vec();
        let a_bn = BigUInt::new(dest).unwrap();

        small_rng.fill_bytes(dest);
        let b = dest.to_vec();
        let b_bn = BigUInt::new(dest).unwrap();

        assert!(a_bn == a_bn);
        let i_cmp = a.partial_cmp(&b).unwrap();
        let b_cmp = a_bn.partial_cmp(&b_bn).unwrap();

        assert!(
            i_cmp == b_cmp,
            "i_cmp {:?} != b_cmp {:?} in trial {}",
            i_cmp,
            b_cmp,
            trial
        );
    }
}

#[test]
#[ignore]
// Run
//   cargo test test_memleak -- --ignored
// which may take several minutes.
// That should give you plenty of time to see if processes with names matching
// /test_bignum-*/ grow in memory.
fn test_memleak() {
    let trials = 500_000_u64;
    let mut small_rng = SmallRng::seed_from_u64(123_u64);

    for _ in 0..trials {
        let data = &mut vec![0_u8; 512];
        data.fill(0);

        small_rng.fill_bytes(&mut data[..]);
        let a = BigUInt::new(data).unwrap();

        small_rng.fill_bytes(&mut data[..]);
        let b = BigUInt::new(data).unwrap();

        let mut true_count = 0;

        if a < b {
            true_count += 1;
        }
        if a > b {
            true_count += 1;
        }
        if a == b {
            true_count += 1;
        }

        assert!(true_count == 1, "We have the wrong number of truths.")
    }
}

#[test]
fn test_constants() {
    let b001 = &BigUInt::new(&[0_u8, 0, 1]).unwrap();
    let b101 = &BigUInt::new(&[1_u8, 0, 1]).unwrap();
    let b000 = &BigUInt::new(&[0_u8, 0, 0]).unwrap();
    let b222 = &BigUInt::new(&[2_u8, 2, 2]).unwrap();

    for bn in [&BigUInt::ONE, &BigUInt::ZERO, b001, b101, b000, b222] {
        assert!(bn == bn, "Something isn't equal to itself")
    }

    struct TestVector<'a> {
        a: &'a BigUInt,
        b: &'a BigUInt,
        expected: bool,
        name: &'a str,
    }

    let tests = [
        TestVector {
            a: &BigUInt::ONE,
            b: &BigUInt::ZERO,
            expected: false,
            name: "ONE, ZERO",
        },
        TestVector {
            a: b000,
            b: &BigUInt::ZERO,
            expected: true,
            name: "b000, ZERO",
        },
        TestVector {
            a: b001,
            b: &BigUInt::ZERO,
            expected: false,
            name: "b001, ZERO",
        },
        TestVector {
            a: b101,
            b: &BigUInt::ZERO,
            expected: false,
            name: "b101, ZERO",
        },
        TestVector {
            a: b222,
            b: &BigUInt::ZERO,
            expected: false,
            name: "b222, ZERO",
        },
        TestVector {
            a: b000,
            b: &BigUInt::ONE,
            expected: false,
            name: "b001, ONE",
        },
        TestVector {
            a: b001,
            b: &BigUInt::ONE,
            expected: true,
            name: "b001, ONE",
        },
        TestVector {
            a: b101,
            b: &BigUInt::ONE,
            expected: false,
            name: "b101, ONE",
        },
        TestVector {
            a: b222,
            b: &BigUInt::ONE,
            expected: false,
            name: "b222, ONE",
        },
        TestVector {
            a: &BigUInt::ZERO,
            b: &BigUInt::ONE,
            expected: false,
            name: "ZERO, ONE",
        },
        TestVector {
            a: b222,
            b: b101,
            expected: false,
            name: "b222, b101",
        },
    ];

    for t in tests {
        assert!(
            (t.a == t.b) == t.expected,
            "(a,b) Unexpected result for {}",
            t.name
        );
        assert!(
            (t.b == t.a) == t.expected,
            "(b,a) Unexpected result for {}",
            t.name
        );
    }
}

#[test]
fn test_hex() {
    // run enough trials to know that we will get some leading zero bytes.
    let trials = 1_000;

    // really should loop to try at different lengths, including odd ones
    let vec_size = BigUInt::BN_BYTE_LENGTH - 129;
    let mut small_rng = SmallRng::seed_from_u64(1138_u64);

    for trial in 1..=trials {
        let mut dest = vec![0_u8; vec_size];
        small_rng.fill_bytes(&mut dest);

        let in_hex = HEXUPPER.encode(&dest);
        let bn = BigUInt::from_hex(in_hex.as_str()).unwrap();
        let out_hex = bn.to_hex();

        let in_hex = in_hex.trim_start_matches("00");

        let out_hex = out_hex.trim_start_matches("00");

        assert!(
            in_hex == out_hex,
            "Hexes aren't equal in trial {}\n\tin: {}\n\tout {}",
            trial,
            in_hex,
            out_hex
        );
    }
}

// modpow BIG_B (base), BIG_E (exponent), BIG_M (modulus), BIG_R (result)
// are taken from tests in num_bigint

static BIG_B: &str = "\
                      efac3c0a_0de55551_fee0bfe4_67fa017a_1a898fa1_6ca57cb1\
                      ca9e3248_cacc09a9_b99d6abc_38418d0f_82ae4238_d9a68832\
                      aadec7c1_ac5fed48_7a56a71b_67ac59d5_afb28022_20d9592d\
                      247c4efc_abbd9b75_586088ee_1dc00dc4_232a8e15_6e8191dd\
                      675b6ae0_c80f5164_752940bc_284b7cee_885c1e10_e495345b\
                      8fbe9cfd_e5233fe1_19459d0b_d64be53c_27de5a02_a829976b\
                      33096862_82dad291_bd38b6a9_be396646_ddaf8039_a2573c39\
                      1b14e8bc_2cb53e48_298c047e_d9879e9c_5a521076_f0e27df3\
                      990e1659_d3d8205b_6443ebc0_9918ebee_6764f668_9f2b2be3\
                      b59cbc76_d76d0dfc_d737c3ec_0ccf9c00_ad0554bf_17e776ad\
                      b4edf9cc_6ce540be_76229093_5c53893b";

static BIG_E: &str = "\
                      be0e6ea6_08746133_e0fbc1bf_82dba91e_e2b56231_a81888d2\
                      a833a1fc_f7ff002a_3c486a13_4f420bf3_a5435be9_1a5c8391\
                      774d6e6c_085d8357_b0c97d4d_2bb33f7c_34c68059_f78d2541\
                      eacc8832_426f1816_d3be001e_b69f9242_51c7708e_e10efe98\
                      449c9a4a_b55a0f23_9d797410_515da00d_3ea07970_4478a2ca\
                      c3d5043c_bd9be1b4_6dce479d_4302d344_84a939e6_0ab5ada7\
                      12ae34b2_30cc473c_9f8ee69d_2cac5970_29f5bf18_bc8203e4\
                      f3e895a2_13c94f1e_24c73d77_e517e801_53661fdd_a2ce9e47\
                      a73dd7f8_2f2adb1e_3f136bf7_8ae5f3b8_08730de1_a4eff678\
                      e77a06d0_19a522eb_cbefba2a_9caf7736_b157c5c6_2d192591\
                      17946850_2ddb1822_117b68a0_32f7db88";

// This modulus is the prime from the 2048-bit MODP DH group:
// https://tools.ietf.org/html/rfc3526#section-3
static BIG_M: &str = "\
                      FFFFFFFF_FFFFFFFF_C90FDAA2_2168C234_C4C6628B_80DC1CD1\
                      29024E08_8A67CC74_020BBEA6_3B139B22_514A0879_8E3404DD\
                      EF9519B3_CD3A431B_302B0A6D_F25F1437_4FE1356D_6D51C245\
                      E485B576_625E7EC6_F44C42E9_A637ED6B_0BFF5CB6_F406B7ED\
                      EE386BFB_5A899FA5_AE9F2411_7C4B1FE6_49286651_ECE45B3D\
                      C2007CB8_A163BF05_98DA4836_1C55D39A_69163FA8_FD24CF5F\
                      83655D23_DCA3AD96_1C62F356_208552BB_9ED52907_7096966D\
                      670C354E_4ABC9804_F1746C08_CA18217C_32905E46_2E36CE3B\
                      E39E772C_180E8603_9B2783A2_EC07A28F_B5C55DF0_6F4C52C9\
                      DE2BCBF6_95581718_3995497C_EA956AE5_15D22618_98FA0510\
                      15728E5A_8AACAA68_FFFFFFFF_FFFFFFFF";

static BIG_R: &str = "\
                      a1468311_6e56edc9_7a98228b_5e924776_0dd7836e_caabac13\
                      eda5373b_4752aa65_a1454850_40dc770e_30aa8675_6be7d3a8\
                      9d3085e4_da5155cf_b451ef62_54d0da61_cf2b2c87_f495e096\
                      055309f7_77802bbb_37271ba8_1313f1b5_075c75d1_024b6c77\
                      fdb56f17_b05bce61_e527ebfd_2ee86860_e9907066_edd526e7\
                      93d289bf_6726b293_41b0de24_eff82424_8dfd374b_4ec59542\
                      35ced2b2_6b195c90_10042ffb_8f58ce21_bc10ec42_64fda779\
                      d352d234_3d4eaea6_a86111ad_a37e9555_43ca78ce_2885bed7\
                      5a30d182_f1cf6834_dc5b6e27_1a41ac34_a2e91e11_33363ff0\
                      f88a7b04_900227c9_f6e6d06b_7856b4bb_4e354d61_060db6c8\
                      109c4735_6e7db425_7b5d74c7_0b709508";

#[test]
fn test_modpow_big() {
    let base_hex = BIG_B.to_uppercase().replace('_', "");
    let exp_hex = BIG_E.to_uppercase().replace('_', "");
    let mod_hex = BIG_M.to_uppercase().replace('_', "");
    let expected_hex = BIG_R.to_uppercase().replace('_', "");

    let base = BigUInt::from_hex(&base_hex).unwrap();
    let exp = BigUInt::from_hex(&exp_hex).unwrap();
    let mut modulus = BigUInt::from_hex(&mod_hex).unwrap();
    let expected = BigUInt::from_hex(&expected_hex).unwrap();

    let result = base.modpow(&exp, &mut modulus).unwrap();

    assert!(result == expected);
}

#[test]
fn test_mont_modpow_big() {
    let base_hex = BIG_B.to_uppercase().replace('_', "");
    let exp_hex = BIG_E.to_uppercase().replace('_', "");
    let mod_hex = BIG_M.to_uppercase().replace('_', "");
    let expected_hex = BIG_R.to_uppercase().replace('_', "");

    let base = BigUInt::from_hex(&base_hex).unwrap();
    let exp = BigUInt::from_hex(&exp_hex).unwrap();
    let mut modulus = BigUInt::from_hex(&mod_hex).unwrap();
    modulus.precomp_mont_ctx().unwrap();
    let expected = BigUInt::from_hex(&expected_hex).unwrap();

    let result = base.modpow(&exp, &mut modulus).unwrap();

    assert!(result == expected);
}

#[test]
fn test_is_odd() {
    struct TestVector<'a> {
        hex: String,
        is_odd: bool,
        name: &'a str,
    }

    // use the numbers (hex strings) we had for modpow testing
    let b = BIG_B.to_uppercase().replace('_', "");
    let e = BIG_E.to_uppercase().replace('_', "");
    let m = BIG_M.to_uppercase().replace('_', "");
    let r = BIG_R.to_uppercase().replace('_', "");

    let tests = vec![
        TestVector {
            hex: b,
            is_odd: true,
            name: "b",
        },
        TestVector {
            hex: e,
            is_odd: false,
            name: "e",
        },
        TestVector {
            hex: m,
            is_odd: true,
            name: "m",
        },
        TestVector {
            hex: r,
            is_odd: false,
            name: "r",
        },
    ];

    let re_last = Regex::new(r"(..)$").unwrap();
    for t in tests {
        // There must be better ways to do this without bringing in all the regex machinery
        let caps = re_last.captures(&t.hex).unwrap();
        let last_byte = HEXUPPER.decode(caps[0].as_bytes()).unwrap();
        let pp_byte = last_byte[0].wrapping_add(1);
        let mm_byte = last_byte[0].wrapping_sub(1);

        let t_pp = re_last.replace(&t.hex, HEXUPPER.encode(&[pp_byte]));
        let t_mm = re_last.replace(&t.hex, HEXUPPER.encode(&[mm_byte]));

        let bn = BigUInt::from_hex(&t.hex).unwrap();
        let bn_pp = BigUInt::from_hex(&t_pp).unwrap();
        let bn_mm = BigUInt::from_hex(&t_mm).unwrap();

        let is_odd_t = bn.is_odd().unwrap();
        let is_odd_pp = bn_pp.is_odd().unwrap();
        let is_odd_mm = bn_mm.is_odd().unwrap();

        assert!(
            is_odd_t == t.is_odd,
            "{}'s oddness should be {}",
            t.name,
            t.is_odd
        );
        assert!(is_odd_pp == is_odd_mm);
        assert!(is_odd_t != is_odd_mm);
    }
}

#[test]
fn test_reduction() {
    struct TestVector<'a> {
        a: &'a str,
        m: &'a str,
        expected: &'a str,
    }

    let tests = vec![
        TestVector{
            a: "4F6907E3D479DC095C2AE3D2C57AA6E6DFA45DCF5CA6C71703A7353D67880E0642D4A0C8C310DBBB01CF1B91DD800BE11E08733112D9B0907A5A5D10D1FF98CA6D6928EEAA29FD4D5C32733B4BD772CB86239E70B2739A38B3B2E66166DAEF61C086CC87040FA33DE34A8B5AA5CA7CBFDA4593B3C4BDB1669A8F1D571D57E79549D72C08133B35418038B0CACC62D74B2BC8F38DC7EBBD61E1170E51D1C862EC77AA9FB9512B902C3E9E563574D9F65362667322C593A7099F9F42B5E523A32E8BFB0E3589B7E73C75BB051603C41F8119B18484553F751D1B4CF70AAAB8182D057BFCB47BDA36B80EB5E792186A9B506AE90F37949682CC890B79A1462C2A3B62B3817233E6F64E9E579B54FE78F7D03CD5F7F77FE88C3DF99C4FE2E74FC51CCE3A4B620ECB05CF79A63D72B5AC23B1D683B976281838CE6C8181599A20FAEFF3BC5473ED88721C40436A88A0C987CDE7EF2FCF1A58270530260EC0C847FE6783ACE4F310DFC557020FB87B0CAB99F8F3DE74122D84FDFF5382C224C9973A846E57FF9CC2259C636F4715B4E7E0EAA4B0BFC1AAE527344096C09E0B1B83B84B08FCBF3AF29A7133FB33F0472E681A0FEC7A7FFAE9A5C53ED1272FBACDA1E2F031F2DBE97C8A526E3260C726ADF14ED26A393566754A5E463972250871B0CBACDFC06B1B1C8571216DFF3119761D9511001C61456E2CE73EB48ADB9AEE2CFC62",
            m: "AD89DE1145FF24139BF3A8BA63274EDCAB01F46C2CFA3FB6A0A950FF4D16296DAA338D016064E5D4AF8E9ED14E44C62E799ECA7D3B26C1551B00DCA0BE7F1CE307F5A5B7C08F086AC0742E75817D2A6915E932261CD8F7CF5B490BD4A24053972DD1A50F23CCB47214D6EEB7D3A7A8BBF587D9A52A34B80CFDD35F42C7F09A2C1DBF6F14F1CCF5991EB5EA02E2368D11B4B680B1786457DD311A7C9833B1B436F77DF5C661F1BDDC3CFD3F11FF18FF283799345E35F91E92FD410C486366324E33E6939F83AA7D0B2800A5FB23F2383E88041BB0303EE559DC54E88765E328F35D26F9857E606A44AEDD01D660C37FC1044BA2EF4B933E2F723415FC2446EA123B4D55F9CC94DF91D33FD26B99930E249353580B2FDC174DD60A3898BBCAF45DB4F6DA7ECBED6405238462EB3BA7769CD5A3E3A451376CE228B56961ABBD32023DB4839B3D2BC8CF5EEF4774DB822EBCC32C8850010C508F6545CD2255B1161B4B0B32A427445EFB294179ECD857956DE6A30C3AFDC0AB62FAD32E0750574BC8596FA273BBAC0B4D502E4D33514E68EDCC59EAECEE526D186162C9B6C7B6CD181B877537A610136C375088D1AE87EC3E00363F5DD6D3B3FE5AAEB11855ADD4963C453291975DDA02F76F52F3B8270A311ED67929D6A2A624899C1132CDC8CC951107D0AC948AFB361E8CA85D24C7461FDD3163737AEE9996E1C45EAB94E609FB",
            expected: "4F6907E3D479DC095C2AE3D2C57AA6E6DFA45DCF5CA6C71703A7353D67880E0642D4A0C8C310DBBB01CF1B91DD800BE11E08733112D9B0907A5A5D10D1FF98CA6D6928EEAA29FD4D5C32733B4BD772CB86239E70B2739A38B3B2E66166DAEF61C086CC87040FA33DE34A8B5AA5CA7CBFDA4593B3C4BDB1669A8F1D571D57E79549D72C08133B35418038B0CACC62D74B2BC8F38DC7EBBD61E1170E51D1C862EC77AA9FB9512B902C3E9E563574D9F65362667322C593A7099F9F42B5E523A32E8BFB0E3589B7E73C75BB051603C41F8119B18484553F751D1B4CF70AAAB8182D057BFCB47BDA36B80EB5E792186A9B506AE90F37949682CC890B79A1462C2A3B62B3817233E6F64E9E579B54FE78F7D03CD5F7F77FE88C3DF99C4FE2E74FC51CCE3A4B620ECB05CF79A63D72B5AC23B1D683B976281838CE6C8181599A20FAEFF3BC5473ED88721C40436A88A0C987CDE7EF2FCF1A58270530260EC0C847FE6783ACE4F310DFC557020FB87B0CAB99F8F3DE74122D84FDFF5382C224C9973A846E57FF9CC2259C636F4715B4E7E0EAA4B0BFC1AAE527344096C09E0B1B83B84B08FCBF3AF29A7133FB33F0472E681A0FEC7A7FFAE9A5C53ED1272FBACDA1E2F031F2DBE97C8A526E3260C726ADF14ED26A393566754A5E463972250871B0CBACDFC06B1B1C8571216DFF3119761D9511001C61456E2CE73EB48ADB9AEE2CFC62",
        },
        TestVector{
            a: "3F6527C86BBC08B1D1E32D6FF662A961EACA8CC799651B8BAD27F7FA74E81D97DEE11FC275E094FE1E41DF848429324CA92DA99C96FBAAB0BA3912BA2D878058AAFDE7DBC2C631656F28758B4B020EEB32C66D406F093E44F391FC5C384E2220D685361CBA42526420A13505E9F3CD2BB4EFBBEA9FC7F5DFE3E28F4A499F8042A9C57EA5DEFA28C43182129F3FE17D7452595B84AFC9A6A19597A2F3A30B64BDD6C0BBCC3DDD5171E0F113D8E94B394FDEB04EB28C070AC066F5F9B48FE5A8A3D27D31EB88D8F964454A04FA196AD25711FCB4CEF10C4FB273640E8471E22992E1A426B669182B20BC2FF42A9C1F4D42AD09372D4DA1B5826D389107037440131262A841C22315FCF7B49539C807A683EA2519C4721D1D101E4DE02B76C5744740C744F37AC6F6B8FE5769AE0FEAFD538074AC9F95C190878DC7F8D0C307C66B17A280F74415AA97CA61A6DCB1996F72D2F9FDD7165988E2CDC073F2DB43FF9D1388267360B56BB9EF4DCE2FE89979E333699F58E7BDFF5D369B3E97899695382E433484850FD06342C341DE185F0D0D4DBDA89FCC5CAAC567E8587C553CED1BD4B837181B02EA661682927B4808CA1BE44C8B44D27AAF3F3A37FBC32C98070CCAF250A9FF3FBFD6E47D25678618CAF5E962F166256B96A1F59C437A022636AAD62A746A136105A4D4119F51049DE3B1DC3091BCA126D6697741F84755E6C7F7",
            m: "EF26A908E773CCB74B712B44B690E74653128CD4F5559E5403580380E5621203674F5624FFA8B53D09A95769B998F5883A588D50EAA2E8A4D901D605D9023C0D0C613E75297A433B5348375286E1C665787FDA13BC7FF8EB529DC61BD1A889A021C07BD4B3B11E0CCCC5F5C48578C066892A45A08A01C09AFB06D381F56D226382F11B992054DD047039E4104C8354FA9BC32A2E39CBC7141D84F48F4EF6E3DF7499735FA60ED2B51A2EA9A2A836569334193C0642BCA0834410064AF205300A455E8F0445B3D5057706F75BCED8B98B9D69AE285A6C7CC2106C273E0E11A41D878951E25481F987FA83A7D708D6EF7ADB77D6120AFA0F00CEB95F09827A75F5C4815C2176470E347FE5FBDEF92D1FC1860731DFFEFAF139632E3935164B7B172ACABF6C25976CEC8226C11D9AF20FD018C24478D7123615B250D2190CEED7D538665E5363FF19AF2A8A4EDFD0AC676E2EB65DE8783D0149282D4B1196372F38CD395DA8755F81E49B25E57FCD964C84CA496568E4A58505E871316CF476D100D32CDDFEC09C8831F37E397F17C280B93C801ABC460214C2A0DC170662104A8E62F97B10E5EFD0A78BB0EA0D6783B548FDBAEBD7EE48909C2CA58BC0DB41F340F07B301446D57475905E3C168956829D663457D08E9E0B0A5081396945697F547DC509A7E6EF1FAC1FCE9933F1B068F565FF9A71F0D84F76DDD336EE39B44B86",
            expected: "3F6527C86BBC08B1D1E32D6FF662A961EACA8CC799651B8BAD27F7FA74E81D97DEE11FC275E094FE1E41DF848429324CA92DA99C96FBAAB0BA3912BA2D878058AAFDE7DBC2C631656F28758B4B020EEB32C66D406F093E44F391FC5C384E2220D685361CBA42526420A13505E9F3CD2BB4EFBBEA9FC7F5DFE3E28F4A499F8042A9C57EA5DEFA28C43182129F3FE17D7452595B84AFC9A6A19597A2F3A30B64BDD6C0BBCC3DDD5171E0F113D8E94B394FDEB04EB28C070AC066F5F9B48FE5A8A3D27D31EB88D8F964454A04FA196AD25711FCB4CEF10C4FB273640E8471E22992E1A426B669182B20BC2FF42A9C1F4D42AD09372D4DA1B5826D389107037440131262A841C22315FCF7B49539C807A683EA2519C4721D1D101E4DE02B76C5744740C744F37AC6F6B8FE5769AE0FEAFD538074AC9F95C190878DC7F8D0C307C66B17A280F74415AA97CA61A6DCB1996F72D2F9FDD7165988E2CDC073F2DB43FF9D1388267360B56BB9EF4DCE2FE89979E333699F58E7BDFF5D369B3E97899695382E433484850FD06342C341DE185F0D0D4DBDA89FCC5CAAC567E8587C553CED1BD4B837181B02EA661682927B4808CA1BE44C8B44D27AAF3F3A37FBC32C98070CCAF250A9FF3FBFD6E47D25678618CAF5E962F166256B96A1F59C437A022636AAD62A746A136105A4D4119F51049DE3B1DC3091BCA126D6697741F84755E6C7F7",
        },
        TestVector{
            a: "81546DB9F699D404723F0C832DE8A51FCC45D7FCCDE47539E3456A7A0AD779557BDADF6E73CD984483C96776CF8982A25EF971CF666B51B37E511B69EBEABF50A1C231F3C5C53BA8D082D824B5FC67902CBB6EA0B32D273065F25C9ACC0E03EB0FDC4B942F310456F47C7847AF1D62C3B02F51F22C228EBE919D8E42633D1ECAB2C74F99D14C2931EB612EB492EF1ABC59431D96886AE5884E7BB6478904A3DE3C140DCCB813E27276AD532F9FF79E186D5B590052F6F5FB6DDE2FCADE748BAA3117790ADCED373C19FA00111BFA9658EF6F2F1B3ABD60656CD558183DDC12F5CFF3AEB42023E3656FE8CCEE9C1A8B908E85CD32190724FBB5004484CCF3755CA96626C075CCD6076BFC59A51480E6E7A6887703BDE7B95B9C979F11FAC69C4B39E95113312BA2735E460CA82D068FC72D2BBFF7F89265D1AE4B1205CEB6778799098503A0D0AB3E6EB54D45538751F4A3EB59D2C3BE7C68E2D76E13BD431D35A1B7531C7A55F19ADA71FADCAAB172E72996FD54C0235B92FF7AD988BCF37A3311298BDEC1BDDF00EA8FA6CEB01665D71D3042B986BEDD9BD9A8419A5EF62A5BBF5F25AF803B34B23F751793FD1EA1389EB24882952E72022E502F5F61CB24D3845B14C04CE810ACD3B7C3D35D22DC7E060EAD1E3A2AADF458B8E6076C8655C8B8A0CB5E22832AA9013B5BEE37D67AD14571B01C859C9A0F542AAAB1E3F76562",
            m: "BA5488BBC250AFA7B6D38A8BA76076A3C554F913E49C8B7005E3DEBC94AA6C0AEE5D9B52CAA5FC08AFF4FDBD4B3BD37B06812FB0AF1051D8E522977143FB32FA449943182976C3F252D6B915BB640DFA51AA38E7C060630F9FCB4115BDEE674BA1958DDBBFF413BDEF35BDD5E5DD7200780D56F29DA683F60C1274002A9B9C317585DC92B6D4B5DCE1032B60DECC5659EDF51B1B64908C8CB8584FC64D5A134840BA3CF1BFA4248D26122E17F304A119B9DA051F8F89869B9C0854AC2783AE81514A60375C799AFA515CC3706DFD4E6B8940FD71613DE3519B9FCA19FF3198C4B74C5FAEE1E8124A9275450DADB8113774E857EE5127B40F604ECFD0475AFD30F7367E53A3B4541947158EA0050ADC0E9B93AB720B3C759ED67FFB6005F5BD766BE2BC5AD1C634213E833D5027ABE752FDA53A9634BC5EE54A3CA08EDC72AB1A3864B0082AE70D32A5F10FC86DB2F6BB6BED1B9ACEE35F0AECCB0653F59A7E95F8F4278D3559C30F54D0C07887C1168144CBDC210EEEE078D096B7314F46E9B0062265F593C13060CDFE1360936C34D220C4690F9C65027DAEC4F19642DF6C98D39750B24BF1D9E53FCD1BF995B6A6C9246024CB5902F397A918999FE52D5863B9E2E246BACCEC7A190FD7BC722C232409D507B339673CE0E50D224C82D0AF0453754C8C790FC6AFC02CD77524052D5EFFBAB42C1E1979018B23B2731049BE84",
            expected: "81546DB9F699D404723F0C832DE8A51FCC45D7FCCDE47539E3456A7A0AD779557BDADF6E73CD984483C96776CF8982A25EF971CF666B51B37E511B69EBEABF50A1C231F3C5C53BA8D082D824B5FC67902CBB6EA0B32D273065F25C9ACC0E03EB0FDC4B942F310456F47C7847AF1D62C3B02F51F22C228EBE919D8E42633D1ECAB2C74F99D14C2931EB612EB492EF1ABC59431D96886AE5884E7BB6478904A3DE3C140DCCB813E27276AD532F9FF79E186D5B590052F6F5FB6DDE2FCADE748BAA3117790ADCED373C19FA00111BFA9658EF6F2F1B3ABD60656CD558183DDC12F5CFF3AEB42023E3656FE8CCEE9C1A8B908E85CD32190724FBB5004484CCF3755CA96626C075CCD6076BFC59A51480E6E7A6887703BDE7B95B9C979F11FAC69C4B39E95113312BA2735E460CA82D068FC72D2BBFF7F89265D1AE4B1205CEB6778799098503A0D0AB3E6EB54D45538751F4A3EB59D2C3BE7C68E2D76E13BD431D35A1B7531C7A55F19ADA71FADCAAB172E72996FD54C0235B92FF7AD988BCF37A3311298BDEC1BDDF00EA8FA6CEB01665D71D3042B986BEDD9BD9A8419A5EF62A5BBF5F25AF803B34B23F751793FD1EA1389EB24882952E72022E502F5F61CB24D3845B14C04CE810ACD3B7C3D35D22DC7E060EAD1E3A2AADF458B8E6076C8655C8B8A0CB5E22832AA9013B5BEE37D67AD14571B01C859C9A0F542AAAB1E3F76562",
        },
        TestVector{
            a: "D0E00A3594003ED36E0DD81C12AB021C07558A3ADE03E23A2D0E4186E72DC1BFAD41D610DB8B842A1E834674202498256209F066E497525E7A8E24CC9B9CC3380868763F952372E65B1CB598743993F0FCF89187F831FFC3526168066B62FD49D30AA3A00C01B8F1020A5B57B87410E66228678D477822CC06AB9B55FA60826471954194753732D2CE10E3874C748246AC0ED323D5C6C0E023A10DC9C391010D81C04C9A6C71F1EB4C10D4BF5AEE34DF270028AFEF0260C476C0F60C6177A92E41C37A3A8DD4BE1E3C521BC249F1C4E3009DAF6293D33518348269CD3771FE53EDDA4149000EED911E186DDB48F45D85E188CF18FAD54CBE28B98D9D0EE4ECB80FA11DC34A73840E5A2B1682DFE8E3F6244D5EECF78AFAA01D871951B995A3796A802B33A9366C0D0D0324F8A3E684751FE26A57D80BFEA4FAD8077373F8E46D772F6BEC868E854FDA7E454BE3A08F5DDE9E895B49E990FDA8248F0D2795432282D5AAE1386C4FA80351C8D4C5646D55AB5C8EC219F1BC424F33FD97A11D9085019EC8063AD82759CE1239D676FA35DBF7F693A767F4FD9795DEEDD5B47D5FF1542B53679A5206E7A751E2B16416EE30543EC416440C03707A27437716BAF8B14EEDE2102EE3B1E9BC4A0054E51AE96A0B3CDD9F1173F27AC811D33DA949BD954FAD2AC4E63DBCAAE1647092E5BC522F7C896E506189294C0B67618469150C2F",
            m: "5BB8AFD23280D8547B2E5DB018DA30198F91489D08962AB17DD8F211194D740A5D6BCCC7CD58B4507AD135CF09F1C6FABC7E3C1FC3444B255CD3A3EFA3FE52286CEA243923A9617E15F7EC1B7F926959DA95030DAB0B7CD38D54F50DC28EC5DFD9204A6E0F77DE0DE1BFFD9CE0213C8CCA839BD5C7F21CB1B698DB9134E33E059ED167F994C47BF59CEED39290F965F078900CA395CFB7420E420C969CD09DD76EBBA2C5E2F021BF44EF9D7BF616DCB8C08F80C651E63EB75966F42E266095D7605ECD3589B336C716D7BC1891B9C4FCF90265DB68F2710D0EC27CB123E77AF95760EB307BC5C0B6C7303DDF30A1B0BDD853D4257181FACA999102BB17806CF5C78140243DAD0D39E2E8DC76DBE67E2502DF6C701A722E2478486EAE08EDA901DD03BD2D9C7584794AD7025AD5AC492B07B1EADCA1E59398FAA0B16A3B4532F32ED00E0640BD378283A9069ABC14D51CEF631BD8B6A2DC916759D18998C5B0990A31D7B0892A9B1B502849D6A6DE5D37C13D16169F06CC0B1D73D93231CD11FAD05BA2C819B54674776DD407460BCFD2696DBB5B2106CC34F890E0F50F3723C9975629A09C05812B3A2A4CB579E22087ED9127AD15441B08C7041B107A9FBA3C721CDD3052E90AE40047DECCE1A81CAB81207AB4C906FFA186B2DF928B5722210A296978D1461145598DE6BD77296DB51F704B06216370EFFE38463BD19673",
            expected: "5A2A7DB52F53035E026F1DBA2AF8C1EAF13F25DC7E7D2AA8F30B3407A7ABF01CDEC2829EB3DA3B274BA61F6F88EDC75982F3B6AEAA0F878984FE19CCC8947020CC27E5AE105F41B52B12D1F032B86EB609CC96E555E1FA5F1242E92312676EEB6B3A69D4D7361D72CFE0C512E8813E4DC1334542E7B590018C1829DC23E363AA852F330D0081026B49EE8816DD8485F9F75667EF30863FF736E52B5B0EBA35BC01B88C8A840532755814B789763B132139E9ED10D0EE2FA180E6EB763814869CABF3B2D6C74F959E63A6226EA56F0BE2823BD1C33C081484F442527FD1BCC11133EA98C6AB59719540C131E064C5B647BA3ACBDAC7CC958F99E167B776F5014C1145F0E63C17FCC04DB14CA7FAE12DFFC56E661B6B65B934126DB21149553F2E09AB1DF78340E14CDE559E2220D61D4C63EE663FFC1117310EB41BF13992989AC26C0A4F60591D232C00481C0932DE1663380C9AB34F8B172E5CAE5643D3A695A85A85E0957307EB1630F6C606E568EA0BAE8AAC6848610A3E9DCF83E559A4CBEE73F35066092D068E89CDEDBB5B639C471BB63ADF895728C58E6893E60495061D70C4779D833F6115B84CD0FED83B4E26C3E2C5B32DFA85B3EDEF9FF3D74BE38043345265E32763A69BCF1C16B83C23AD06A8106E09518FD72AF68081A5FE329304FC3A78716737CBD60028D422C5B71023C071A1168A6F7371D86A9902BD",
        },
        TestVector{
            a: "E4D02542199ED053B6888D4C42C47DD81E99878BEE010FA7D7C6BC235B06EA4AE85DD757B65C13A400DEAF5121C77264E99D6AF6ACAA624E96FEEEE927183682A93C975517EF1649437CFCF147CDBEF7D82944343F8EAFB5CEBC099038D5D88C706084827548B7D29CD7F5B7EB85F44C18CFDAF9CE7C70B6D78D30F3579C641237AE0A055B99D416B6DF4D6D51E9BA35C69D76607AF51F6EC60AFACF399B47243A9E9CDB96E72E65F08C43A30272F642C018F82D9858C7375FE32228D4E5BD7C6E07995884AE2D77B55D4BEB88125D9D45B4E200398F42BE5A9DC2A1C7E7A423673CDDC6A9B128AE92C021608DC1B30F44C04092C8DF935BD09C2158FD04FE89781527C953AB9A9AB4714BCDB654A3BE4156868ECA88B842ED6C8D45BBBF09744A3F893ED584F7B965A31433EC2DEA987F60A9EBD56BBC8BA577D4CDC078006649B8DBE91EA916DD1541F57364A432EFA282B7260A959E7389FE8CE966873AB86BABD533B710C702C7F60A3FCC245D9F6B0497829EC8792DBBF17D692E5EB94D97F354CEE0B02B96B45DBF449F4F9C12B94C4666D1CF657E6EBEC0E93F6209520FBEEFBFAABDC0DD41F82D3EA610241C61EA12B1093BA9333A4A77EC285D56224A5903D1CCD8B168C19AF589D34EB29161B26E8144D3233752E60893E6E2F1EBC02207D49DB03B3AE3775C88DF2B75E45A4823B7CE5F482343FD1FDBFD6BC2F9",
            m: "B5F9957E6D014DB9E2048475E20E32326380A1D02FED6686E566484694D087E46CF9C3F6C80CABEDC84951BCDD147111DFFF2F67DFD69017908348EC3C2F124F1A9BF22804679C3D0DDDC60049D83B667B9E877A8BB5EB9EEE358739A77B0E17CDD0A3D5B23273BCBB5374F5967EF1C75DF03D97310C5E0A171243E20EC92743539CDEDA81736BD76D4BF05ECAE761B753FC29A426E60263AD991613D43E223463F847ACE649BB09A70AE594FE627FE5254FD829FE1E01A7A6250E8F0BA7EEDE5D18AE0CF05DB96158F4430EE4A2F4611A5083B18E6F0D3037AF4A376BCAD8D3377E791A527B1D67EC6B81AF0C3FA6E85D5236FC5FCB9534CAD0D2EE6DA031950458B28DF55766E24912A5699341B185BD1B91C17156E3C1423AD45228A20FEA9AED4814787497E3502055CCECB4A00233B127B9286EA4BE757EC8D3B4187A54DB9CCD4B872815A5C758DD031A4C4820E0C14E6BADD5E38F9AAFACA4044D7FD89B4CEF62491716813B51C609B57E438210D58E93A8B2649408A1E5B3BD97ADEF16E3DC15D196813F502E320CEB238360CB3C5680A9F42AF552BA031AC3E702D0A442A2467204B957B44582950B5EBE960A4A672DF469FB9E0F95D6A9977DEC70B8773817218F8691A5D549769E1830E9A2151CB5F14A0564FC5FC06D1A545874C7A089BA5ACC91F93B120110AE70F02EE6FB44FF0C541399499C3DF51BB08309",
            expected: "2ED68FC3AC9D8299D48408D660B64BA5BB18E5BBBE13A920F26073DCC63662667B641360EE4F67B638955D9444B30153099E3B8ECCD3D237067BA5FCEAE924338EA0A52D13877A0C359F36F0FDF583915C8ABCB9B3D8C416E0868256915ACA74A28FE0ACC3164415E18480C255070284BADF9D629D7012ACC07AED1148D33CCEE4112B2ADA26683F49935D0E8702587E72A14CBC540F1D0B1871E4BB655D24EFD6A6552EB09D735C49815E0E0410765D9AC920039A3AC58FB9BE1399C93DCE9E10EEEB4B945074165C6908DCA36F693C2B645E4EAB20358E22EE786A5C1CCB502FBE64AC57360B46A6549FB181820C26E76E09966913FE2705CB4E6A8F64CCF473BC753B5E5433B86B5EA6642312F238843AF4CD5931D481AB31B8F3931CF989AF52412A5D105FD61582BE66FF794A964BAF8232ACFD17CD2FF90BFA0C5F86116E1C0E9D978101374DE918704A57EACEC1C168BA5CBFBAE3EF4EE0456239BADFD05EE5D16DF9B0818CA4443616A61A1D5A2F08EEF6161499B34F97B570C70B5E810F78B90F19AA57642F8D37B42C18B1EE0FEFE627DB3A891C04BDCE7B7B06816B7C4D7938B907858DB2AAA99AB16586579FAB8314D1AD952AB4A14290DF69B191E1CBBAAB492AD71BC5AC13353681A7BF9D51CB53891DD256864826CC8E9976F8817E1A42E3A941A8655B7830BA85B5734CDEB8C20B3489FA60E1E6E1BB3FF0",
        },
        TestVector{
            a: "20ED9403EEC06F76107E573645C04F24878BC7CD89E99CBAAD0942524463BE21671632D3CCE82EB6B60D8C9AF7759B8690EFFDFED4B7519EBF8B69F37CAAA6C9507D2E4D8F9B0E469ABE4AAA5A8EB740E2F40A44D53F43A425A2CCAFDB91EAFB2DBF37A7E9B5C35BE6D86E1B06548C1D6E98726E8F7EEF190CA89DBE82F023FA025FE035E1BF9055EE1C8D570F265CCA58A2508937A8331A55963E95D3A78AB7BE0A1B73898D2AB241D8512D2E35ADE57793450C5E2DADF75DC802115CBCA972EFEB02811B6FD27D384668054C268225BE320FBD7B97F0E8BBFDABAE23E43F3EC5BBD3770506AB6C5B34614C5D0420B38EAF13B17BF2C604A37EA1EA7A5637609D66CCFDC3FB85644BA846BC8F3A02AA59BD070080E3661AE63F7252EE83CDB726AB067945F3B97FEF9A66B4C0C2C147E52591E189715A38BEFF9E01EE2F85D83EE1F52C079EFE965A655AD13091DDD18749467E03AF9563292BD632BF7667F6489AFFBD0F68F5442C4179FF6982EE114DE8FAF55B0D3D643FA56A000C40F4AF5A0628390CFCB9DD07BC408B444B0BCB221AC5B6B3E3914EBA762FC9BD04A3AE32CEC6AE4104E538E54EF7D73AE8ED842E531CFC270B6AAA3E7B563B0B1D856D607A0A4BB20A833B1EDE4A7315543538693BE790D9FBE5BCEA62707E74616C688477BECE23D084D7F8B2B4CA6C66F4BE5C6E43FF109CB0A8EFC34C6C418157D3",
            m: "7B2A3FCD15A4AFBA86683646BC25ACCBE573966F50CEFD827288DD301036E27305B33D70E5D9E2BA631FFF2647535E7C4C34E82E3C909CD38260347B83763868D631BCB42445BE5BDBE4A2DD7DB07BA5CB5F9BF25344665C0CDC4CF84A64D1909DC295BE6C1F823BC8CE10CB3930BA7757F3443F84C45BD20F7B656F4ECBBB9820DC549BD7B1691A5A2C38B3A30AA9A65BDBFEB88DEC09700A83FDAFA54F9F0624245C938023A47DCF4C497D667A55C4EB4528B873E57BAFB6F6D6273C1378E4099C4041E93328703CA2AB65BFDC2C9CB62C466AA1545ED1340442C896F218DB9766AB7A279EB82F33248A187B4E9311D0FA4EF02428793100578AD19AC9F8636C7FF4FBFCBD2D3ABA9B4170019CBE699C10C1CFFB8AA6502A16983DC4847110AFF933505E587C30CCD74C6CA734476B70EBFA0CB1DD77215A74AD3CC77DCCB3761AA27FF8493D1FDFBB393F3524B0F66DA558590F314E4DB508C872EA009CC4940B76A95D13F55C8B0FE5328752EA219D740C6A722B624C0336DB556A7B5BFD244C620CD9F8B464AF300BCCD0176F1F007D6845138002E2A9319DE5108E3D1F8EE60714D932723551CCE005006E7D76A5E08C50EB603C764A380B5654FC618F04A727480C8CE70C05D5EE3539C95415D60E0076E0A217A929E7D6F051684E4B5F036E69AB35E29FC1D74F313F440C75260EA91D4033BFEE4DCD32DF3AD6A84B",
            expected: "20ED9403EEC06F76107E573645C04F24878BC7CD89E99CBAAD0942524463BE21671632D3CCE82EB6B60D8C9AF7759B8690EFFDFED4B7519EBF8B69F37CAAA6C9507D2E4D8F9B0E469ABE4AAA5A8EB740E2F40A44D53F43A425A2CCAFDB91EAFB2DBF37A7E9B5C35BE6D86E1B06548C1D6E98726E8F7EEF190CA89DBE82F023FA025FE035E1BF9055EE1C8D570F265CCA58A2508937A8331A55963E95D3A78AB7BE0A1B73898D2AB241D8512D2E35ADE57793450C5E2DADF75DC802115CBCA972EFEB02811B6FD27D384668054C268225BE320FBD7B97F0E8BBFDABAE23E43F3EC5BBD3770506AB6C5B34614C5D0420B38EAF13B17BF2C604A37EA1EA7A5637609D66CCFDC3FB85644BA846BC8F3A02AA59BD070080E3661AE63F7252EE83CDB726AB067945F3B97FEF9A66B4C0C2C147E52591E189715A38BEFF9E01EE2F85D83EE1F52C079EFE965A655AD13091DDD18749467E03AF9563292BD632BF7667F6489AFFBD0F68F5442C4179FF6982EE114DE8FAF55B0D3D643FA56A000C40F4AF5A0628390CFCB9DD07BC408B444B0BCB221AC5B6B3E3914EBA762FC9BD04A3AE32CEC6AE4104E538E54EF7D73AE8ED842E531CFC270B6AAA3E7B563B0B1D856D607A0A4BB20A833B1EDE4A7315543538693BE790D9FBE5BCEA62707E74616C688477BECE23D084D7F8B2B4CA6C66F4BE5C6E43FF109CB0A8EFC34C6C418157D3",
        },
        TestVector{
            a: "CE0E714F2A00443F6657D931AA7A4DA3078FE05909FBC221CB709797542E6A451D1C75D9F106631A1D511BBD53D914CD8C38BF767FCFD0E4BDAFC7E87AB27DE9BB996931EAF41308F7110DA2355FEC44688870BA3FA3C917E50BD70585727DA202A055FA847CB77933DFB23CC12405C2C254E14563542987E67A0ED0B5D7170083C41C144031B90D95D7850303E1856CAC94EDF09069D06503158EE975FCD428D332AAED80BAEE6F034E90D5D55588E8A4FB219F65A1D15217D378C159A8AF206780381DA73AA43D096466532F87072B590B37F346C94BFFCB0AE85043DAFA291416B1C7981AC2B9A67736AA6E1B1B0AB1E674B54106342B2A84F28D7F602953AE22E3E8D215E8BF148D568450484115676875D070FA568DCE9E859F6144BFB5F6ACD8650AD6AC803AFD741C3C9CE5D17AF4CF1ADEBF0F8197CAE365B5CCCCFEC7462C5A02278A2D91208DFAC5F7DC713BB9B40F74B8330A524E2B8E8489CC96C41BB01B9B1EB1063168F39B3967A30C5F1189460FAECE805FA25733CBF39C6FE0BDB304D78C9ED73326131534116BF05D8A8E2D74EBED1C9ED22C7FC68DF07503DAD4E17CF32109B52EC6ACB8B0FB406CAF2851150D2AA27C605CC3A0EB9FC8F2E9C3745F0F4CC39659C9935B5CB5E0CD09E9006BE25EB2C2D131FE643BEB0B318E53F883F482ABE292721E49AB5A4BCC9CE1156F44FD8FF9BE195616312431",
            m: "58A4B2DCF05EF0B571B747608D1868C6E03F9ED376E182A209C32D9E6751B720EFEC7722E6B67AD969C578100AD48E6969706EB7B8CA04201F703E7E793137A68CB81B3B373CB5514D1AE042F7520AD7350017B8E1FEC9A51CA14B081A8EC2EF1218F282B154FFC93C7EE1322A8A8A660214C29C4EFF99CEC0CF09B4C6C5F626E1209CA8609342FB8BDF0D3D342A0AC2B74EF4493A9054DD51513D6E6BB0C3A9491CB61CBAD25FD7F212C7B3921E9A0F1299A78EB6890B144587B45019182F77BDE651F2D3AA9B91D6825AC50C69E3EB1D8EB366022F2AFED7DD59C0C09D8AD8239415344CD60263B5076B597B724E7F596A785F56F352659F21DBDC3A8777AA03D503C30AD86261D764F8683BDFFE6902A1C44B4655CEB188C8414B116397A584A03B035D6CC3300A169B60C0A244268FDAAF2339D94B81E732D921FFAB1964CE6F574FE53768FFA9DC694D187D31015BD8C244DC11BD6059C3C6F1CB8AB2301505C6E885E31D35A9BE2D4968AC1D95B26CD766A564749075C79771F22E534AA0B2C854EFD9F8292050C1C35F2361AB2B20DDFBE5B97AA3BD9C9F1C326F34071890BD534EFE088585A6618CE9FE27A2836ADC0EF934A569E4A9A2A36CD9E02C43D7ABD0B3C630EB68D491EBB0B645929863525AA0FBA0E371B29B7829B8E9D15C4908E3A4226359AB6C2D3D9512C7B543108768997FDE024785E7E359FB4191",
            expected: "1CC50B95494262D482E94A7090497C154710A2B21C38BCDDB7EA3C5A858AFC033D43879423996D6749C62B9D3E2FF7FAB957E2070E3BC8A47ECF4AEB88500E9CA22932BB7C7AA8665CDB4D1C46BBD695FE8841487BA635CDABC940F55054F7C3DE6E70F521D2B7E6BAE1EFD86C0EF0F6BE2B5C0CC554F5EA64DBFB67284B2AB2C182E2C37F0B33167E196A889B8D6FE73DF7055E1B4926AA6073140C9E9B4CD640F93EB40B162EBF1F29016EB11854CA7FC7D281F88FBB298CC4102127785030EBB39437FFE56D195C5FB0C916B33F551DEDD127426AF6021B5034CEC29FE478CCEE875EFE6EBDF23C685FF777367E0BFF1183F6931F8F5FEC413AD50A5139FFA678DC62BC6523FB65C365B3D88844436224ED39E44EB92ABD0E03093E7D906AED6C625E4FFD262026D03D5ABB585D845B3F70D46B0C787DC9653121B6769A352A677DBA37B8B82E3D67BB6094FD7A6E84082F85BC94B8499EC69DAAED7468369A10224A8F58769ADDEC9908680F67E0FA37DA78C4E5E55F7413284FE796F5DA9F58225AF7D8AE84F2848F8E75CAA89A0748D235A978F7D52398EE4761AF8866D2B95A3ADEF70FFEA9E20392E4B4ABFB65D9703322A3DFCEB30D177CC737DF706B3A6BD2F782EAECC4B0A5BBF9F02ABB9C43444B29EB1CEBDF6BFB0E10CA176878FC42313BAFBBF88BBA17A31F85CAE1467BD2443C45418B6AB2498F623AA10F",
        },
        TestVector{
            a: "37AC2AB9EC9BC6E34C0D78A1F1EC8D86D4D3905E37AA60A35CDD54B68775D747E4881D83D165AFF0A37F76FF07FF86C99F5132C07D4F452E30EB5250DC58522889C29E341E0B16B9C87F0447A81DD84026D52F68E166AB800317B292916A74AC9E981D89202C8CE70C6A727C59B0DDCA773086B5346D1A873CF142C1A0743667FDF3925B1871BAFCB9F4D85FC79829A30737CCD67AC3E0261D2120155193A66DB162786E75427700071D5D6E4517C61B06C21881A6D7DBD83A5C8919FC82636749FE1D3E91B524E462346B6AD6EBADE8B0B5B7BDDF07FE8B46690D0713BEFF3F2FD9624B8D278225006BABCE48F6F35CD482D6A9566433F80964C3F60357E1546D3315FE9EE5C3470341936C63E0D415AE2C03837C305C58D60CD9F257627250D7F3A7DCF0A0C6893B04595836F978D09243B4CE498B283918F62F09B0DE2EEAD508E1B9F5E3E02D45FA6D02C06601295BB0C00A0A5127190A3A71EAE9B599F1F3571228521B1B2C43626445A554398832CC6E8D4E1AE4106EA364C34641332E3854C1A291E8ECB0525F185DC3025111B5F74706392986DAE98BA49C73C105233D446D1EB843024F7E2FB153C00AC35ACF6D515941DC29064DAFD2A112963EBEDCF113707526CD4284D2232DF4A2E0C0A5FB49AE9E29145D3D3FBCC1EFBE48FEFF247A36013D9E457080E44F7AD5835ABD4DF279CA91325AD479CFD8888B11EF",
            m
            expected: "6DF8069B02165856412AB02AFA743E37B1718EF3410CBB840EE800C0A2B7677B9394C58FF9E40615A3D0E6A09C610401CC471FAA16949CBBF1A9C0DBCE783418350C099A7A7E23DDC31AAF35205242DBCAB296B7A7A11B701FED49EE2C528706167CE77D2BBBDFBFCCD25F0150AF4B7F4A70762407C11B774612C807BDE76462F0946CB1D07D4A66A5308230C729BA582EE409B82B9C07691436CE0FD376DE338258DCC8830A41782343B2B9F9602ACB88FFA72C17BC0EA0E05AC8F376800EA20A9EF0F09580CE610AF038F3CD386CC0E3E92D7EEFF728A21D06A52AF031EA5B359C6DAEDA05C8C8649E818E2E8DE96A55205DF86EF777EFA9D92441D954CF9B991288179EBA029D33312F7EB787048EDA9F131224DE5D97F107D8ABD10376722EC49D2BF031E3C6C4B7609DB87870D7C142AB2292DAA0F20577DE1B5D8D894A6CF32C81B4CDA7F56201C52929F8F172BD11E8606F61287B71A98C09FF2DE37D0EB5AB7FF9E54274443EAF2CBF8D33879E4F09276E522A4A800F0C2A34B1335A432D78B3141F29A6C612A4EA76689C1ADDE0653820CF0BC9999F41F307BC32FBF29C46C33C94D7104F4F7F8F90CF10494725E529CC25FEC3C99873E4D89B348847CDC5247E74B3D484D2DA91E662DAB28416B9D4504BC0E382F511C703AF3436B1F774CCB56424E643CEE1A053EFEEA823289F565F20939DE3E82C61597787",
        },
        TestVector{
            a: "38FA04E33F81D7F7746CA6E59228DBB79996DCFC8FCA9EC35A7196CD292E98B9B2325AAE2367D9495F6FA29F39AF7C520FDEA6E33781C4DBBE5270C5400791FB2B3C90BEF8A77285850A637CAE126B2B6FBFE49684721CFE5A02E3835FA81F8505912ACF2C3AFD41CF1F1184ADA2A42B8606001B44E3AE4935403A58E0D0FE54D8AB5C8D5AEE0BC860F56B08472563F2C3ADE1F90BF9358D94BF9B96FAEB112FA41AE818E6D0B8E7A1643E961E645441AEE4ED5C465A5789D17695C4E4701F3434030BABF4AB319813B37428610576632E46A0EA32855B072CDE30979A3282FB01FA2F39F4AD1843763DDE3E72E1BE4D4EC326D3872B16C84F9F87C815C2F0F188B9B62FE004F980F425354E6D4E642C6852E7795D75AEEFDB41CB74CED884EDB80EEEF0EADC72D7FC9F3BBAD4B96BE247C8FE372ED4FD49A48B3BECFF4D3486A85C5F9481B589380EFCA81FB8FE34A554C4F2B29CA4CEBD47BEC0310CAE01B13782C4759F066C420AFD5007A93ED1B788FADA75B6C00A739E7F489D71BD12FD5502020B64FD8BF03C3BDF4F6C7F1521F70FDD6B96DD56E0BF4B176986CCB7F3E6BEEC6C16DDB258C08D5DA93B133A9BDD1845EA96C82D381CF8BE70182DA1F7A83979C5B6F7C7A7C0D0963E5CB8C5F0AEBB38F14BBC92A4A2420BB8BA7DFD514BC471D008691DBB6B6A8D3016D5A149A57F571B07BFB6B12BB2FD4B1963B32A",
            m: "E73800A50C5CC05EA5C07ED0CEA159D5C3091002ACA8156ACFC1E961CEE12A7787832E4F6BAD54A91521E758544B20B788A37EDD830E1F585A351E477A06C2A3E616E92013A3947E76DFCD0489DC77783B5C5864225DF958715E385F21286D00650E53F834B97925026121A0AEE0DA02887BE170069D6B18362F4FD8A37A8A7D9F0ECB7877101B5050D0D2CA1DD06B57787A8A9C618750012BEF6A0DD343A0041F432264EC93F2DA06024C9835FE69113E09719EC938C0C33100063CB4896646412F3A9737497CEF3FA36DA51F31EE467DB7BB2BC01419C64A37CCA19F8FF5A6B26C89675953BAA2615C2E5EC3FD6936F8179A35661D3616D9038754DF443B653B05AB3943DB71D1D2E9A925CFFE106C695B8EE2AE122379C8CF7BD603AD63DD5CC1892C174ED01B33F365985803886AC6147C03FAED9487B4F956278EA9997204C5038F9C9726920B8571445911E03CB42B43E3798DCE797DC75FCF60BD1C3BB1129D0D257D930B1623FE7F8486D0E4F270759514C28C7E276586DF6F928FFCFA649D5F700669B7FEFD9FC5D56B839EA362CDDEAA94EBB81113596D99BC61AFC22F10C1D3DF5C1AA7B71039376844FE25667413EE2034F43ACE5B5E70FFD837506C70FF9EAF617B6827245EFB77C4F8415E24154CAB41C013502ED82DC8EB89E36F85F5F6F5E8658C9675C377179B8C6C0344B717FA44D9EFA75EEBF031A2C4",
            expected: "38FA04E33F81D7F7746CA6E59228DBB79996DCFC8FCA9EC35A7196CD292E98B9B2325AAE2367D9495F6FA29F39AF7C520FDEA6E33781C4DBBE5270C5400791FB2B3C90BEF8A77285850A637CAE126B2B6FBFE49684721CFE5A02E3835FA81F8505912ACF2C3AFD41CF1F1184ADA2A42B8606001B44E3AE4935403A58E0D0FE54D8AB5C8D5AEE0BC860F56B08472563F2C3ADE1F90BF9358D94BF9B96FAEB112FA41AE818E6D0B8E7A1643E961E645441AEE4ED5C465A5789D17695C4E4701F3434030BABF4AB319813B37428610576632E46A0EA32855B072CDE30979A3282FB01FA2F39F4AD1843763DDE3E72E1BE4D4EC326D3872B16C84F9F87C815C2F0F188B9B62FE004F980F425354E6D4E642C6852E7795D75AEEFDB41CB74CED884EDB80EEEF0EADC72D7FC9F3BBAD4B96BE247C8FE372ED4FD49A48B3BECFF4D3486A85C5F9481B589380EFCA81FB8FE34A554C4F2B29CA4CEBD47BEC0310CAE01B13782C4759F066C420AFD5007A93ED1B788FADA75B6C00A739E7F489D71BD12FD5502020B64FD8BF03C3BDF4F6C7F1521F70FDD6B96DD56E0BF4B176986CCB7F3E6BEEC6C16DDB258C08D5DA93B133A9BDD1845EA96C82D381CF8BE70182DA1F7A83979C5B6F7C7A7C0D0963E5CB8C5F0AEBB38F14BBC92A4A2420BB8BA7DFD514BC471D008691DBB6B6A8D3016D5A149A57F571B07BFB6B12BB2FD4B1963B32A",
        },
        TestVector{
            a: "40BB7C962533552FF57EEDE717AFBC121E7EC9DB981850B502FCB05AFB0CF05F2FBC07FB0FC9DF0FA3699CA694DD682683A3CD121C7528B75560DAA2BD77C699CBED96DEB7FB0A42EBD7E153B79361BD3EDDD8E90176C13767E0332171BFF788EB1074E32B4E70A9E3E6EF0410642C4969BCA6E7C0D72CD7BAA2113457564B993E1299EDE1D5ED8CAE6777CDC3E068C7DAEF38DDF57A2464DED2522270CC0A69A2CF5D38DE731EF93B239AB0234ED84B35F0BCB4F6375F29DC4775EBE3785AC5F68DE4127C7158918B8DD366C9DB3F364BD671D7D7156898584DEF223D8DB24543E3ABF9C848687FCD5F9C1350F9F6B101DCCC2473CF69C42B9F01FAAF40A6FF7E97EBDDA820C22F98BCDA1E07D1AC1AD40407F529C600C5E539240AB82B1D7C960265AEB74C70C2332229EB4F7C56C1E23235AA42F8B35488BCE13D6056EA997EAE36B6F1ED391F020188C2A19B4BA30E10FAF40BA773E4DC7BCCE188F69C70D4C2B50E6D7A834B47686BFD32DD2361006E495FCB0A0972E45BA03017E1837DCB8D111EA5D493F5496296EF05E002CFC742D2E9EB2E70661B7F7F5135E22BCC7CD60C18C03F5E6E3175BDDF11ADA923E724168A1D3DB5F9FD006D6291CB7C48973166B8CF152854372FA97F0EA1994DF6D5A2F7D3B4BA0F5CAF8D272C194603D41269E1F957B606426CA7D9B57FCF927BC011E05A44F87CBBDA15AC4792D7BA",
            m: "ADC22C72C52C778B99B17247B29FE0C94C72E5D9744BDC28A672ACBECB655ED2CD527BCA8843BA1C8FCD943B8F6A8A0AF68B5FC48737A41BD7F69BF43A629D790F4DC89A075886C6546C6B4CE86E92718A6030858EFDBA331C56DD88BAD99BDFD0F9F3EB48A55744D67E2F9A2FFF45B91E175858B92A02129C1CA32AE93578B19964DC39D845F57C4346D84967DDF1D96E835D54C284B1D2F652A5AEBF577C50C30BA34ED240AEF543C0D645032309A87843E7F2F41DB1EEC3C73F8B31E3B09D9FFA41E3A76609B1B3C984CB8604869E4D9F10A358F274A22D8952D95EA21625DD21F8078660B4DDBFD92D052C4EABE80244B37F1F104283AFF5559ACA32834300B6D1044D2C68A0479F960BC9FCDF937BE5EB9BA619392FF393E2FFC50A9798E4C6DB11AFC4A13E95841FDDD751A433B357D1F3DC81B6A229A75FCBAAF6177E263A123C0D673B9E14F27A1738073B684DEDCEAD4D52819B6F9BD136916D5E798CC970AEA80E75AD884B2699D6B1C2C4157118D69AA85ED48D4C8C291637111AD6BF20EB0EA9B3BA77A70AA8E140B7348FB7D66EB5AABC2936B9E4DCE6E58918A4423CEFEF3973781B6B9C33A33CED684F9898CE5BEE7A96D97B04B06D176C703489CB2E79A4598DCBC0D43FA47812503F90D8A06864977EA704FCA20D4A7B31A7B0A2232AD770A91B1FFF80E9AA8FF5796B97DB648A359DF3A5F58D2C23FD01",
            expected: "40BB7C962533552FF57EEDE717AFBC121E7EC9DB981850B502FCB05AFB0CF05F2FBC07FB0FC9DF0FA3699CA694DD682683A3CD121C7528B75560DAA2BD77C699CBED96DEB7FB0A42EBD7E153B79361BD3EDDD8E90176C13767E0332171BFF788EB1074E32B4E70A9E3E6EF0410642C4969BCA6E7C0D72CD7BAA2113457564B993E1299EDE1D5ED8CAE6777CDC3E068C7DAEF38DDF57A2464DED2522270CC0A69A2CF5D38DE731EF93B239AB0234ED84B35F0BCB4F6375F29DC4775EBE3785AC5F68DE4127C7158918B8DD366C9DB3F364BD671D7D7156898584DEF223D8DB24543E3ABF9C848687FCD5F9C1350F9F6B101DCCC2473CF69C42B9F01FAAF40A6FF7E97EBDDA820C22F98BCDA1E07D1AC1AD40407F529C600C5E539240AB82B1D7C960265AEB74C70C2332229EB4F7C56C1E23235AA42F8B35488BCE13D6056EA997EAE36B6F1ED391F020188C2A19B4BA30E10FAF40BA773E4DC7BCCE188F69C70D4C2B50E6D7A834B47686BFD32DD2361006E495FCB0A0972E45BA03017E1837DCB8D111EA5D493F5496296EF05E002CFC742D2E9EB2E70661B7F7F5135E22BCC7CD60C18C03F5E6E3175BDDF11ADA923E724168A1D3DB5F9FD006D6291CB7C48973166B8CF152854372FA97F0EA1994DF6D5A2F7D3B4BA0F5CAF8D272C194603D41269E1F957B606426CA7D9B57FCF927BC011E05A44F87CBBDA15AC4792D7BA",
        },
    ];

    for t in tests {
        let mut a = BigUInt::from_hex(t.a).unwrap();
        let mut modulus = BigUInt::from_hex(t.m).unwrap();
        let expected = BigUInt::from_hex(t.expected).unwrap();

        let result = a.mod_reduce(&mut modulus).unwrap();
        assert!(result == expected);
    }
}
