use hacl::digest::{self, Algorithm};

#[cfg(feature = "hazmat")]
use hacl::hazmat::blake2;

mod test_util;

#[cfg(feature = "hazmat")]
use test_util::hex_str_to_bytes;

// Tests from https://raw.githubusercontent.com/BLAKE2/BLAKE2/master/testvectors/blake2-kat.json

#[test]
fn blake2s() {
    let data = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,
        0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    ];
    let expected_digest = [
        0xe2, 0x90, 0xdd, 0x27, 0x0b, 0x46, 0x7f, 0x34, 0xab, 0x1c, 0x00, 0x2d, 0x34, 0x0f, 0xa0,
        0x16, 0x25, 0x7f, 0xf1, 0x9e, 0x58, 0x33, 0xfd, 0xbb, 0xf2, 0xcb, 0x40, 0x1c, 0x3b, 0x28,
        0x17, 0xde,
    ];

    assert_eq!(digest::hash(Algorithm::Blake2s, &data), expected_digest);
    #[cfg(feature = "hazmat")]
    assert_eq!(blake2::blake2s(&data, &[]), expected_digest);

    #[cfg(feature = "hazmat")]
    {
        let data = b"hacl rust bindings";
        let key = b"don't use this key";
        let expected_digest =
            hex_str_to_bytes("b69b76e2bf17a8683c42d746f6b2ec16796184421b29919a6be814614c345182");
        assert_eq!(blake2::blake2s::<32>(data, key), expected_digest.as_slice());
    }
}

#[test]
fn blake2b() {
    let data = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,
        0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
        0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
        0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a,
    ];
    let expected_digest = [
        0x22, 0xef, 0xf8, 0xe6, 0xdd, 0x52, 0x36, 0xf5, 0xf5, 0x7d, 0x94, 0xed, 0xe8, 0x74, 0xd6,
        0xc9, 0x42, 0x8e, 0x8f, 0x5d, 0x56, 0x6f, 0x17, 0xcd, 0x6d, 0x18, 0x48, 0xcd, 0x75, 0x2f,
        0xe1, 0x3c, 0x65, 0x5c, 0xb1, 0x0f, 0xba, 0xaf, 0xf7, 0x68, 0x72, 0xf2, 0xbf, 0x2d, 0xa9,
        0x9e, 0x15, 0xdc, 0x62, 0x40, 0x75, 0xe1, 0xec, 0x2f, 0x58, 0xa3, 0xf6, 0x40, 0x72, 0x12,
        0x18, 0x38, 0x56, 0x9e,
    ];

    assert_eq!(digest::hash(Algorithm::Blake2b, &data), expected_digest);
    #[cfg(feature = "hazmat")]
    assert_eq!(blake2::blake2b(&data, &[]), expected_digest);

    #[cfg(feature = "hazmat")]
    {
        let data = b"hacl rust bindings";
        let key = b"don't use this key";
        let expected_digest= hex_str_to_bytes("33676daed38f2f1f9518e87c4897484c609505e24a73590bbd0d251553049675452d92f53e7d5f2c9c49729310dfe5cda734b29deb3dcc46794af5de9854c5cc");
        assert_eq!(blake2::blake2b::<64>(data, key), expected_digest.as_slice());
    }
}
